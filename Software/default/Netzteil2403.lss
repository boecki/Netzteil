
Netzteil2403.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000015a0  00001634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000128  00800132  00800132  00001666  2**0
                  ALLOC
  3 .stab         00000378  00000000  00000000  00001668  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000071  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004dc  00000000  00000000  00001b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001af5  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000089c  00000000  00000000  00003b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001854  00000000  00000000  000043be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003d0  00000000  00000000  00005c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000065a  00000000  00000000  00005fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000769  00000000  00000000  0000663e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      10:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      14:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__vector_5>
      18:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      20:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      24:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      28:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      2c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      30:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      3c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      40:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      44:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_17>
      48:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      4c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      50:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_20>
      54:	0c 94 02 03 	jmp	0x604	; 0x604 <__vector_21>
      58:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      5c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      60:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      64:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      68:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      6c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      70:	0c 94 94 03 	jmp	0x728	; 0x728 <__vector_28>
      74:	0c 94 c0 03 	jmp	0x780	; 0x780 <__vector_29>
      78:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>

0000007c <msg_1>:
      7c:	4d 65 6c 64 65 2d 53 79 73 74 65 6d 2d 54 65 73     Melde-System-Tes
      8c:	74 00                                               t.

0000008e <msg_2>:
      8e:	4d 65 68 72 20 54 65 73 74 00                       Mehr Test.

00000098 <msg_3>:
      98:	6b 75 72 7a 00                                      kurz.

0000009d <msg_storage>:
      9d:	7c 00 8e 00 98 00                                   |.....

000000a3 <__c.1698>:
      a3:	4d 65 6e 75 20 75 6e 62 65 6b 61 6e 6e 74 00        Menu unbekannt.

000000b2 <__c.1693>:
      b2:	48 61 72 64 77 61 72 65 20 66 65 68 6c 74 00        Hardware fehlt.

000000c1 <__c.1689>:
      c1:	53 6f 66 74 77 61 72 65 20 66 65 68 6c 74 00        Software fehlt.

000000d0 <__c.1686>:
      d0:	20 00                                                .

000000d2 <__c.1684>:
      d2:	3e 00                                               >.

000000d4 <__c.1682>:
      d4:	50 6d 3a 20 20 20 20 20 57 20 50 69 3a 20 20 20     Pm:     W Pi:   
      e4:	20 20 57 00                                           W.

000000e8 <__c.1680>:
      e8:	49 6d 3a 20 20 20 20 20 41 20 49 69 3a 20 20 20     Im:     A Ii:   
      f8:	20 20 41 00                                           A.

000000fc <__c.1678>:
      fc:	55 73 3a 20 20 20 20 20 56 20 55 69 3a 20 20 20     Us:     V Ui:   
     10c:	20 20 56 00                                           V.

00000110 <__c.1676>:
     110:	20 7a 75 72 f5 63 6b 20 4e 54 31 00                  zur.ck NT1.

0000011c <__c.1672>:
     11c:	20 00                                                .

0000011e <__c.1670>:
     11e:	3e 00                                               >.

00000120 <__c.1668>:
     120:	54 57 49 4e 2d 56 49 45 57 20 4f 70 74 69 6f 6e     TWIN-VIEW Option
     130:	65 6e 00                                            en.

00000133 <__c.1666>:
     133:	4c 61 64 65 6e 20 31 20 20 20 4c 61 64 65 6e 20     Laden 1   Laden 
     143:	32 00                                               2.

00000145 <__c.1664>:
     145:	4e 65 74 7a 74 65 69 6c 31 20 4e 65 74 7a 74 65     Netzteil1 Netzte
     155:	69 6c 32 00                                         il2.

00000159 <__c.1662>:
     159:	48 61 75 70 74 6d 65 6e 75 00                       Hauptmenu.

00000163 <__c.1652>:
     163:	20 00 00                                             ..

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d0 e1       	ldi	r29, 0x10	; 16
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	e0 ea       	ldi	r30, 0xA0	; 160
     17a:	f5 e1       	ldi	r31, 0x15	; 21
     17c:	02 c0       	rjmp	.+4      	; 0x182 <.do_copy_data_start>

0000017e <.do_copy_data_loop>:
     17e:	05 90       	lpm	r0, Z+
     180:	0d 92       	st	X+, r0

00000182 <.do_copy_data_start>:
     182:	a2 33       	cpi	r26, 0x32	; 50
     184:	b1 07       	cpc	r27, r17
     186:	d9 f7       	brne	.-10     	; 0x17e <.do_copy_data_loop>

00000188 <__do_clear_bss>:
     188:	12 e0       	ldi	r17, 0x02	; 2
     18a:	a2 e3       	ldi	r26, 0x32	; 50
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
     190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
     192:	aa 35       	cpi	r26, 0x5A	; 90
     194:	b1 07       	cpc	r27, r17
     196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
     198:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
     19c:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <_exit>

000001a0 <__bad_interrupt>:
     1a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a4 <main>:
int16_t drehgeber_1 = 0;
//********************************************************************************
 
int main()
{
     1a4:	cf 92       	push	r12
     1a6:	df 92       	push	r13
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	6c 97       	sbiw	r28, 0x1c	; 28
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	f8 94       	cli
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	cd bf       	out	0x3d, r28	; 61
	uhrzeit.snc = 0;
     1c4:	10 92 1c 02 	sts	0x021C, r1
	// Improvisierte Sollwertvorgabe auf 9V
	uint16_t soll =900;
//********************************************************************************

	// Initalisierung des Displays
	lcd_init(LCD_DISP_ON);
     1c8:	8c e0       	ldi	r24, 0x0C	; 12
     1ca:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
	//Initalisierung des ADC-Wandlers
	ADC_Init();
     1ce:	0e 94 52 04 	call	0x8a4	; 0x8a4 <ADC_Init>
	// Interrupts initalisieren
	interrupt_init();
     1d2:	0e 94 8b 07 	call	0xf16	; 0xf16 <interrupt_init>
	// DCF-Uhr
	clock_init();
     1d6:	0e 94 ac 04 	call	0x958	; 0x958 <clock_init>
	// Drehgeber
	encode_init();
     1da:	0e 94 e6 09 	call	0x13cc	; 0x13cc <encode_init>

	


//********************************************************************************
	// Ausgänge für Strom und Spannungsreferenz konfigurieren;
	DDRD |= (1 << DD5) | (1 << DD6);
     1de:	8a b1       	in	r24, 0x0a	; 10
     1e0:	80 66       	ori	r24, 0x60	; 96
     1e2:	8a b9       	out	0x0a, r24	; 10
	//	Timer 1 A macht PWM mit 10bit auflösung auf Maximaler Frequenz
	//	PWM für die Spannungssollwert 
	TCCR1A |= (1<< COM1A1)| (1<<WGM11) | (1<<WGM10);
     1e4:	80 91 80 00 	lds	r24, 0x0080
     1e8:	83 68       	ori	r24, 0x83	; 131
     1ea:	80 93 80 00 	sts	0x0080, r24
	TCCR1B |= (1<< WGM12) | (1<<CS10);
     1ee:	80 91 81 00 	lds	r24, 0x0081
     1f2:	89 60       	ori	r24, 0x09	; 9
     1f4:	80 93 81 00 	sts	0x0081, r24

	//	Timer 2 B macht PWM mit 10bit auflösung auf Maximaler Frequenz
	//	PWM für die Stromsollwert
	TCCR2A |= (1<< COM2B1)| (1<<WGM21) | (1<<WGM20);
     1f8:	80 91 b0 00 	lds	r24, 0x00B0
     1fc:	83 62       	ori	r24, 0x23	; 35
     1fe:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1<<CS20);
     202:	80 91 b1 00 	lds	r24, 0x00B1
     206:	81 60       	ori	r24, 0x01	; 1
     208:	80 93 b1 00 	sts	0x00B1, r24

//********************************************************************************

	
	// Spannungs-PWM auf umgerechneten Sollwert setzen
	PWM_U_1 = ((soll*32)/47);
     20c:	84 e6       	ldi	r24, 0x64	; 100
     20e:	92 e0       	ldi	r25, 0x02	; 2
     210:	90 93 89 00 	sts	0x0089, r25
     214:	80 93 88 00 	sts	0x0088, r24
	// Ausgabe des aktuellen Wertes
	// lcd_int(ADC_Read(U_1_IST)*47/32);
	// Einfach einen Wert für die Strombegrenzung aussuchen
	PWM_I_1 = 0x88;
     218:	88 e8       	ldi	r24, 0x88	; 136
     21a:	80 93 b4 00 	sts	0x00B4, r24

//********************************************************************************
// Initalisierung abgeschlossen, nun gehts in die Endlosschleife
	// Ab hier beginnt die Interupt behaftete Zone
	//lcd_puts_P("################################################################################");
  	sei();
     21e:	78 94       	sei
	// initaliseren;
	message(0);
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	0e 94 1c 08 	call	0x1038	; 0x1038 <message>
	message(0);
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	0e 94 1c 08 	call	0x1038	; 0x1038 <message>



	while(1)
	{
		if(I_flag_1ms >0)
     22c:	80 91 c0 01 	lds	r24, 0x01C0
     230:	18 16       	cp	r1, r24
     232:	c4 f5       	brge	.+112    	; 0x2a4 <main+0x100>
		{
			I_flag_1ms =0;
     234:	10 92 c0 01 	sts	0x01C0, r1
			flag_10ms--;
     238:	80 91 14 01 	lds	r24, 0x0114
     23c:	81 50       	subi	r24, 0x01	; 1
     23e:	80 93 14 01 	sts	0x0114, r24

			// 1ms Taktrate ******************************************************
			clock_refresh();
     242:	0e 94 bc 04 	call	0x978	; 0x978 <clock_refresh>

			drehgeber_1 += encode_read4();
     246:	00 91 32 01 	lds	r16, 0x0132
     24a:	10 91 33 01 	lds	r17, 0x0133
     24e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <encode_read4>
     252:	99 27       	eor	r25, r25
     254:	87 fd       	sbrc	r24, 7
     256:	90 95       	com	r25
     258:	08 0f       	add	r16, r24
     25a:	19 1f       	adc	r17, r25
     25c:	10 93 33 01 	sts	0x0133, r17
     260:	00 93 32 01 	sts	0x0132, r16
			 drehgeber_auswertung_1ms();
     264:	0e 94 26 0a 	call	0x144c	; 0x144c <drehgeber_auswertung_1ms>
			
			// Provisorische Spannungsreglung
			if(ADC_Read(U_1_IST) <(soll*32)/47) OCR1A++;
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <ADC_Read>
     26e:	84 56       	subi	r24, 0x64	; 100
     270:	92 40       	sbci	r25, 0x02	; 2
     272:	48 f4       	brcc	.+18     	; 0x286 <main+0xe2>
     274:	80 91 88 00 	lds	r24, 0x0088
     278:	90 91 89 00 	lds	r25, 0x0089
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	90 93 89 00 	sts	0x0089, r25
     282:	80 93 88 00 	sts	0x0088, r24
			if(ADC_Read(U_1_IST) >(soll*32)/47) OCR1A--;
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <ADC_Read>
     28c:	85 56       	subi	r24, 0x65	; 101
     28e:	92 40       	sbci	r25, 0x02	; 2
     290:	48 f0       	brcs	.+18     	; 0x2a4 <main+0x100>
     292:	80 91 88 00 	lds	r24, 0x0088
     296:	90 91 89 00 	lds	r25, 0x0089
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	90 93 89 00 	sts	0x0089, r25
     2a0:	80 93 88 00 	sts	0x0088, r24
			// *******************************************************************
		}
		if(flag_10ms <0)
     2a4:	80 91 14 01 	lds	r24, 0x0114
     2a8:	87 ff       	sbrs	r24, 7
     2aa:	08 c0       	rjmp	.+16     	; 0x2bc <main+0x118>
		{
			flag_10ms =9;
     2ac:	89 e0       	ldi	r24, 0x09	; 9
     2ae:	80 93 14 01 	sts	0x0114, r24
			flag_100ms--;
     2b2:	80 91 15 01 	lds	r24, 0x0115
     2b6:	81 50       	subi	r24, 0x01	; 1
     2b8:	80 93 15 01 	sts	0x0115, r24

			// 10ms Taktrate *****************************************************


			// *******************************************************************

		}
		if(flag_100ms <0)
     2bc:	80 91 15 01 	lds	r24, 0x0115
     2c0:	87 ff       	sbrs	r24, 7
     2c2:	42 c0       	rjmp	.+132    	; 0x348 <main+0x1a4>
		{
			flag_100ms =9;
     2c4:	89 e0       	ldi	r24, 0x09	; 9
     2c6:	80 93 15 01 	sts	0x0115, r24
			flag_1s--;
     2ca:	80 91 16 01 	lds	r24, 0x0116
     2ce:	81 50       	subi	r24, 0x01	; 1
     2d0:	80 93 16 01 	sts	0x0116, r24
			// 100ms Taktrate ****************************************************
			
			char buffer[20] = "\0";
     2d4:	80 91 00 01 	lds	r24, 0x0100
     2d8:	90 91 01 01 	lds	r25, 0x0101
     2dc:	9a 87       	std	Y+10, r25	; 0x0a
     2de:	89 87       	std	Y+9, r24	; 0x09
     2e0:	82 e1       	ldi	r24, 0x12	; 18
     2e2:	fe 01       	movw	r30, r28
     2e4:	3b 96       	adiw	r30, 0x0b	; 11
     2e6:	11 92       	st	Z+, r1
     2e8:	8a 95       	dec	r24
     2ea:	e9 f7       	brne	.-6      	; 0x2e6 <main+0x142>
		//	s20_zeit(uhrzeit, buffer);
		//	lcd_gotoxy(0,1);
			lcd_puts(buffer);
     2ec:	ce 01       	movw	r24, r28
     2ee:	09 96       	adiw	r24, 0x09	; 9
     2f0:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_puts>
			char buffer_2[8] = "\0";
     2f4:	80 91 00 01 	lds	r24, 0x0100
     2f8:	90 91 01 01 	lds	r25, 0x0101
     2fc:	9a 83       	std	Y+2, r25	; 0x02
     2fe:	89 83       	std	Y+1, r24	; 0x01
     300:	86 e0       	ldi	r24, 0x06	; 6
     302:	fe 01       	movw	r30, r28
     304:	33 96       	adiw	r30, 0x03	; 3
     306:	11 92       	st	Z+, r1
     308:	8a 95       	dec	r24
     30a:	e9 f7       	brne	.-6      	; 0x306 <main+0x162>
			s8_zeit(uhrzeit, buffer_2);
     30c:	6e 01       	movw	r12, r28
     30e:	08 94       	sec
     310:	c1 1c       	adc	r12, r1
     312:	d1 1c       	adc	r13, r1
     314:	76 01       	movw	r14, r12
     316:	00 91 14 02 	lds	r16, 0x0214
     31a:	10 91 15 02 	lds	r17, 0x0215
     31e:	20 91 16 02 	lds	r18, 0x0216
     322:	30 91 17 02 	lds	r19, 0x0217
     326:	40 91 18 02 	lds	r20, 0x0218
     32a:	50 91 19 02 	lds	r21, 0x0219
     32e:	60 91 1a 02 	lds	r22, 0x021A
     332:	70 91 1b 02 	lds	r23, 0x021B
     336:	80 91 1c 02 	lds	r24, 0x021C
     33a:	0e 94 17 07 	call	0xe2e	; 0xe2e <s8_zeit>
			anzeige_clock(buffer_2);
     33e:	c6 01       	movw	r24, r12
     340:	0e 94 1f 08 	call	0x103e	; 0x103e <anzeige_clock>
			anzeige_refresh_100ms();
     344:	0e 94 34 08 	call	0x1068	; 0x1068 <anzeige_refresh_100ms>
							
			// *******************************************************************
			
		}
		if(flag_1s <0)
     348:	80 91 16 01 	lds	r24, 0x0116
     34c:	87 ff       	sbrs	r24, 7
     34e:	6e cf       	rjmp	.-292    	; 0x22c <main+0x88>
		{
			flag_1s =9;
     350:	89 e0       	ldi	r24, 0x09	; 9
     352:	80 93 16 01 	sts	0x0116, r24
			if(uhrzeit.s %2 == 1)
			{
				// Meldesystem - Stresstest
				//message(1);
			}
			// 1s Taktrate *******************************************************
			clock_tick();
     356:	0e 94 00 06 	call	0xc00	; 0xc00 <clock_tick>
     35a:	68 cf       	rjmp	.-304    	; 0x22c <main+0x88>

0000035c <toggle_e>:
** local functions
*****************************************************************************/
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
     35c:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_high();
    lcd_e_delay();
     35e:	00 c0       	rjmp	.+0      	; 0x360 <toggle_e+0x4>
    lcd_e_low();
     360:	42 98       	cbi	0x08, 2	; 8
     362:	08 95       	ret

00000364 <lcd_write>:
}

/*************************************************************************
Low-level function to write byte to LCD controller
Input:    data   byte to write to LCD
          rs     1: write data    
                 0: write instruction
Returns:  none
*************************************************************************/
static void lcd_write(uint8_t data,uint8_t rs) 
{
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     368:	66 23       	and	r22, r22
     36a:	11 f0       	breq	.+4      	; 0x370 <lcd_write+0xc>
       lcd_rs_high();
     36c:	40 9a       	sbi	0x08, 0	; 8
     36e:	01 c0       	rjmp	.+2      	; 0x372 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     370:	40 98       	cbi	0x08, 0	; 8
    }
    lcd_rw_low();
     372:	41 98       	cbi	0x08, 1	; 8

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= (1<<LCD_DATA0_PIN);
     374:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_DATA1_PORT) |= (1<<LCD_DATA1_PIN);
     376:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_DATA2_PORT) |= (1<<LCD_DATA2_PIN);
     378:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_DATA3_PORT) |= (1<<LCD_DATA3_PIN);
     37a:	3e 9a       	sbi	0x07, 6	; 7
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~(1<<LCD_DATA3_PIN);
     37c:	46 98       	cbi	0x08, 6	; 8
        LCD_DATA2_PORT &= ~(1<<LCD_DATA2_PIN);
     37e:	45 98       	cbi	0x08, 5	; 8
        LCD_DATA1_PORT &= ~(1<<LCD_DATA1_PIN);
     380:	44 98       	cbi	0x08, 4	; 8
        LCD_DATA0_PORT &= ~(1<<LCD_DATA0_PIN);
     382:	43 98       	cbi	0x08, 3	; 8
    	if(data & 0x80) LCD_DATA3_PORT |= (1<<LCD_DATA3_PIN);
     384:	87 fd       	sbrc	r24, 7
     386:	46 9a       	sbi	0x08, 6	; 8
    	if(data & 0x40) LCD_DATA2_PORT |= (1<<LCD_DATA2_PIN);
     388:	c8 2f       	mov	r28, r24
     38a:	dd 27       	eor	r29, r29
     38c:	c6 fd       	sbrc	r28, 6
     38e:	45 9a       	sbi	0x08, 5	; 8
    	if(data & 0x20) LCD_DATA1_PORT |= (1<<LCD_DATA1_PIN);
     390:	c5 fd       	sbrc	r28, 5
     392:	44 9a       	sbi	0x08, 4	; 8
    	if(data & 0x10) LCD_DATA0_PORT |= (1<<LCD_DATA0_PIN);   
     394:	c4 fd       	sbrc	r28, 4
     396:	43 9a       	sbi	0x08, 3	; 8
        lcd_e_toggle();
     398:	0e 94 ae 01 	call	0x35c	; 0x35c <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~(1<<LCD_DATA3_PIN);
     39c:	46 98       	cbi	0x08, 6	; 8
        LCD_DATA2_PORT &= ~(1<<LCD_DATA2_PIN);
     39e:	45 98       	cbi	0x08, 5	; 8
        LCD_DATA1_PORT &= ~(1<<LCD_DATA1_PIN);
     3a0:	44 98       	cbi	0x08, 4	; 8
        LCD_DATA0_PORT &= ~(1<<LCD_DATA0_PIN);
     3a2:	43 98       	cbi	0x08, 3	; 8
    	if(data & 0x08) LCD_DATA3_PORT |= (1<<LCD_DATA3_PIN);
     3a4:	c3 fd       	sbrc	r28, 3
     3a6:	46 9a       	sbi	0x08, 6	; 8
    	if(data & 0x04) LCD_DATA2_PORT |= (1<<LCD_DATA2_PIN);
     3a8:	c2 fd       	sbrc	r28, 2
     3aa:	45 9a       	sbi	0x08, 5	; 8
    	if(data & 0x02) LCD_DATA1_PORT |= (1<<LCD_DATA1_PIN);
     3ac:	c1 fd       	sbrc	r28, 1
     3ae:	44 9a       	sbi	0x08, 4	; 8
    	if(data & 0x01) LCD_DATA0_PORT |= (1<<LCD_DATA0_PIN);
     3b0:	c0 fd       	sbrc	r28, 0
     3b2:	43 9a       	sbi	0x08, 3	; 8
        lcd_e_toggle();        
     3b4:	0e 94 ae 01 	call	0x35c	; 0x35c <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= (1<<LCD_DATA0_PIN);
     3b8:	43 9a       	sbi	0x08, 3	; 8
        LCD_DATA1_PORT |= (1<<LCD_DATA1_PIN);
     3ba:	44 9a       	sbi	0x08, 4	; 8
        LCD_DATA2_PORT |= (1<<LCD_DATA2_PIN);
     3bc:	45 9a       	sbi	0x08, 5	; 8
        LCD_DATA3_PORT |= (1<<LCD_DATA3_PIN);
     3be:	46 9a       	sbi	0x08, 6	; 8
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <lcd_read>:
    }
}

/*************************************************************************
Low-level function to read byte from LCD controller
Input:    rs     1: read data    
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
static uint8_t lcd_read(uint8_t rs) 
{
     3c6:	88 23       	and	r24, r24
     3c8:	11 f0       	breq	.+4      	; 0x3ce <lcd_read+0x8>
    uint8_t data;
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
     3ca:	40 9a       	sbi	0x08, 0	; 8
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     3ce:	40 98       	cbi	0x08, 0	; 8
    
    lcd_rw_high();                           /* RW=1  read mode      */
     3d0:	41 9a       	sbi	0x08, 1	; 8
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
        lcd_e_low();
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~(1<<LCD_DATA0_PIN);
     3d2:	3b 98       	cbi	0x07, 3	; 7
        DDR(LCD_DATA1_PORT) &= ~(1<<LCD_DATA1_PIN);
     3d4:	3c 98       	cbi	0x07, 4	; 7
        DDR(LCD_DATA2_PORT) &= ~(1<<LCD_DATA2_PIN);
     3d6:	3d 98       	cbi	0x07, 5	; 7
        DDR(LCD_DATA3_PORT) &= ~(1<<LCD_DATA3_PIN);
     3d8:	3e 98       	cbi	0x07, 6	; 7
                
        /* read high nibble first */
        lcd_e_high();
     3da:	42 9a       	sbi	0x08, 2	; 8
        lcd_e_delay();        
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & (1<<LCD_DATA0_PIN) ) data |= 0x10;
     3de:	33 9b       	sbis	0x06, 3	; 6
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <lcd_read+0x20>
     3e2:	80 e1       	ldi	r24, 0x10	; 16
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <lcd_read+0x22>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & (1<<LCD_DATA1_PIN) ) data |= 0x20;
     3e8:	34 99       	sbic	0x06, 4	; 6
     3ea:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & (1<<LCD_DATA2_PIN) ) data |= 0x40;
     3ec:	35 99       	sbic	0x06, 5	; 6
     3ee:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & (1<<LCD_DATA3_PIN) ) data |= 0x80;
     3f0:	36 99       	sbic	0x06, 6	; 6
     3f2:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     3f4:	42 98       	cbi	0x08, 2	; 8

        lcd_e_delay();                       /* Enable 500ns low       */
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
     3f8:	42 9a       	sbi	0x08, 2	; 8
        lcd_e_delay();
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & (1<<LCD_DATA0_PIN) ) data |= 0x01;
     3fc:	33 99       	sbic	0x06, 3	; 6
     3fe:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & (1<<LCD_DATA1_PIN) ) data |= 0x02;
     400:	34 99       	sbic	0x06, 4	; 6
     402:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & (1<<LCD_DATA2_PIN) ) data |= 0x04;
     404:	35 99       	sbic	0x06, 5	; 6
     406:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & (1<<LCD_DATA3_PIN) ) data |= 0x08;        
     408:	36 99       	sbic	0x06, 6	; 6
     40a:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     40c:	42 98       	cbi	0x08, 2	; 8
    }
    return data;
}
     40e:	99 27       	eor	r25, r25
     410:	08 95       	ret

00000412 <lcd_waitbusy>:

/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_read>
     418:	87 fd       	sbrc	r24, 7
     41a:	fb cf       	rjmp	.-10     	; 0x412 <lcd_waitbusy>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     41c:	88 e0       	ldi	r24, 0x08	; 8
     41e:	8a 95       	dec	r24
     420:	f1 f7       	brne	.-4      	; 0x41e <lcd_waitbusy+0xc>
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
    
    /* the address counter is updated 4us after the busy flag is cleared */
    _delay_us(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_read>
    
}/* lcd_waitbusy */
     428:	99 27       	eor	r25, r25
     42a:	08 95       	ret

0000042c <lcd_command>:

/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
    register uint8_t addressCounter;


#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
#endif
#if LCD_LINES==4
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);

}/* lcd_newline */

/*
** PUBLIC FUNCTIONS 
*/

/*************************************************************************
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     42c:	1f 93       	push	r17
     42e:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     430:	0e 94 09 02 	call	0x412	; 0x412 <lcd_waitbusy>
    lcd_write(cmd,0);
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	81 2f       	mov	r24, r17
     438:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_write>
     43c:	1f 91       	pop	r17
     43e:	08 95       	ret

00000440 <lcd_data>:
}


/*************************************************************************
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     440:	1f 93       	push	r17
     442:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     444:	0e 94 09 02 	call	0x412	; 0x412 <lcd_waitbusy>
    lcd_write(data,1);
     448:	61 e0       	ldi	r22, 0x01	; 1
     44a:	81 2f       	mov	r24, r17
     44c:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_write>
     450:	1f 91       	pop	r17
     452:	08 95       	ret

00000454 <lcd_gotoxy>:
}



/*************************************************************************
Set cursor to specified position
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
     454:	66 23       	and	r22, r22
     456:	11 f4       	brne	.+4      	; 0x45c <lcd_gotoxy+0x8>
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     458:	80 58       	subi	r24, 0x80	; 128
     45a:	09 c0       	rjmp	.+18     	; 0x46e <lcd_gotoxy+0x1a>
    else if ( y==1)
     45c:	61 30       	cpi	r22, 0x01	; 1
     45e:	11 f4       	brne	.+4      	; 0x464 <lcd_gotoxy+0x10>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     460:	80 54       	subi	r24, 0x40	; 64
     462:	05 c0       	rjmp	.+10     	; 0x46e <lcd_gotoxy+0x1a>
    else if ( y==2)
     464:	62 30       	cpi	r22, 0x02	; 2
     466:	11 f4       	brne	.+4      	; 0x46c <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
     468:	8c 56       	subi	r24, 0x6C	; 108
     46a:	01 c0       	rjmp	.+2      	; 0x46e <lcd_gotoxy+0x1a>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
     46c:	8c 52       	subi	r24, 0x2C	; 44
     46e:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
     472:	08 95       	ret

00000474 <lcd_getxy>:
#endif

}/* lcd_gotoxy */


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
     474:	0e 94 09 02 	call	0x412	; 0x412 <lcd_waitbusy>
    return lcd_waitbusy();
}
     478:	99 27       	eor	r25, r25
     47a:	08 95       	ret

0000047c <lcd_clrscr>:


/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
     482:	08 95       	ret

00000484 <lcd_home>:
    lcd_command(1<<LCD_CLR);
}


/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
     48a:	08 95       	ret

0000048c <lcd_putc>:
    lcd_command(1<<LCD_HOME);
}


/*************************************************************************
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     48c:	1f 93       	push	r17
     48e:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     490:	0e 94 09 02 	call	0x412	; 0x412 <lcd_waitbusy>
     494:	98 2f       	mov	r25, r24
    if (c=='\n')
     496:	1a 30       	cpi	r17, 0x0A	; 10
     498:	99 f4       	brne	.+38     	; 0x4c0 <lcd_putc+0x34>
     49a:	84 31       	cpi	r24, 0x14	; 20
     49c:	10 f4       	brcc	.+4      	; 0x4a2 <lcd_putc+0x16>
     49e:	80 e4       	ldi	r24, 0x40	; 64
     4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <lcd_putc+0x2c>
     4a2:	80 54       	subi	r24, 0x40	; 64
     4a4:	84 31       	cpi	r24, 0x14	; 20
     4a6:	10 f4       	brcc	.+4      	; 0x4ac <lcd_putc+0x20>
     4a8:	84 e1       	ldi	r24, 0x14	; 20
     4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <lcd_putc+0x2c>
     4ac:	94 51       	subi	r25, 0x14	; 20
     4ae:	9c 32       	cpi	r25, 0x2C	; 44
     4b0:	10 f4       	brcc	.+4      	; 0x4b6 <lcd_putc+0x2a>
     4b2:	84 e5       	ldi	r24, 0x54	; 84
     4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <lcd_putc+0x2c>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	80 58       	subi	r24, 0x80	; 128
     4ba:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
     4be:	04 c0       	rjmp	.+8      	; 0x4c8 <lcd_putc+0x3c>
    {
        lcd_newline(pos);
    }
    else
    {
#if LCD_WRAP_LINES==1
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	81 2f       	mov	r24, r17
     4c4:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_write>
     4c8:	1f 91       	pop	r17
     4ca:	08 95       	ret

000004cc <lcd_puts>:
    }

}/* lcd_putc */


/*************************************************************************
Display string without auto linefeed 
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	ec 01       	movw	r28, r24
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     4d4:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_putc>
     4d8:	89 91       	ld	r24, Y+
     4da:	88 23       	and	r24, r24
     4dc:	d9 f7       	brne	.-10     	; 0x4d4 <lcd_puts+0x8>
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	08 95       	ret

000004e4 <lcd_puts_p>:
    }

}/* lcd_puts */


/*************************************************************************
Display string from program memory without auto linefeed 
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	ec 01       	movw	r28, r24
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     4ec:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_putc>
     4f0:	fe 01       	movw	r30, r28
     4f2:	21 96       	adiw	r28, 0x01	; 1
     4f4:	84 91       	lpm	r24, Z
     4f6:	88 23       	and	r24, r24
     4f8:	c9 f7       	brne	.-14     	; 0x4ec <lcd_puts_p+0x8>
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <lcd_int>:
    }

}/* lcd_puts_p */

/*************************************************************************
Initialize display and select type of cursor 
Input:    dispAttr LCD_DISP_OFF            display off
                   LCD_DISP_ON             display on, cursor off
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{

    /*
     *  Initialize LCD to 4 bit I/O mode
     */
     
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT) && ((&LCD_VCC_PORT == &LCD_DATA0_PORT))
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 )  && (LCD_VCC_PIN == 7 ))
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0xFF;
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
        DDR(LCD_RS_PORT)    |= (1<<LCD_RS_PIN);
        DDR(LCD_RW_PORT)    |= (1<<LCD_RW_PIN);
        DDR(LCD_E_PORT)     |= (1<<LCD_E_PIN);
		DDR(LCD_VCC_PORT)   |= (1<<LCD_VCC_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= (1<<LCD_RS_PIN);
        DDR(LCD_RW_PORT)    |= (1<<LCD_RW_PIN);
        DDR(LCD_E_PORT)     |= (1<<LCD_E_PIN);
		DDR(LCD_VCC_PORT)   |= (1<<LCD_VCC_PIN);
        DDR(LCD_DATA0_PORT) |= (1<<LCD_DATA0_PIN);
        DDR(LCD_DATA1_PORT) |= (1<<LCD_DATA1_PIN);
        DDR(LCD_DATA2_PORT) |= (1<<LCD_DATA2_PIN);
        DDR(LCD_DATA3_PORT) |= (1<<LCD_DATA3_PIN);
    }
	LCD_VCC_PORT |= (1<< LCD_VCC_PIN);
	/* wait a minimum of 60ms or more after power-on       */
	uint8_t i = 0;
	for( i = 0; i < 60; i++)
	{
		_delay_ms(1);
	}


    /* configure for 4bit mode */
    LCD_DATA1_PORT |= (1<<LCD_DATA1_PIN);
    lcd_e_toggle();          /* send this command 2 times */
    lcd_e_toggle();
    LCD_DATA1_PORT &= ~(1<<LCD_DATA1_PIN);
    /* set number of lines */
#if LCD_LINES==2
    LCD_DATA3_PORT |= (1<<LCD_DATA3_PIN);
    lcd_e_toggle();
    LCD_DATA3_PORT &= ~(1<<LCD_DATA3_PIN);
#endif
    lcd_e_toggle();
    _delay_us(60);
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    

    lcd_command(LCD_DISP_OFF);              /* display off                  */
    _delay_us(60);
    lcd_clrscr();                           /* display clear                */
    _delay_us(2000);
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */
}/* lcd_init */

void lcd_int(uint16_t integer)
{
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
     50c:	26 97       	sbiw	r28, 0x06	; 6
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	f8 94       	cli
     512:	de bf       	out	0x3e, r29	; 62
     514:	0f be       	out	0x3f, r0	; 63
     516:	cd bf       	out	0x3d, r28	; 61

	char buffer[6];
	itoa(integer, buffer, 10);
     518:	4a e0       	ldi	r20, 0x0A	; 10
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	8e 01       	movw	r16, r28
     51e:	0f 5f       	subi	r16, 0xFF	; 255
     520:	1f 4f       	sbci	r17, 0xFF	; 255
     522:	b8 01       	movw	r22, r16
     524:	0e 94 55 0a 	call	0x14aa	; 0x14aa <itoa>
	lcd_puts(buffer);
     528:	c8 01       	movw	r24, r16
     52a:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_puts>
     52e:	26 96       	adiw	r28, 0x06	; 6
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	08 95       	ret

00000544 <lcd_init>:
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	08 2f       	mov	r16, r24
     54a:	38 9a       	sbi	0x07, 0	; 7
     54c:	39 9a       	sbi	0x07, 1	; 7
     54e:	3a 9a       	sbi	0x07, 2	; 7
     550:	3f 9a       	sbi	0x07, 7	; 7
     552:	3b 9a       	sbi	0x07, 3	; 7
     554:	3c 9a       	sbi	0x07, 4	; 7
     556:	3d 9a       	sbi	0x07, 5	; 7
     558:	3e 9a       	sbi	0x07, 6	; 7
     55a:	47 9a       	sbi	0x08, 7	; 8
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	e8 eb       	ldi	r30, 0xB8	; 184
     560:	fb e0       	ldi	r31, 0x0B	; 11
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     562:	cf 01       	movw	r24, r30
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <lcd_init+0x20>
     568:	2f 5f       	subi	r18, 0xFF	; 255
     56a:	2c 33       	cpi	r18, 0x3C	; 60
     56c:	d1 f7       	brne	.-12     	; 0x562 <lcd_init+0x1e>
     56e:	44 9a       	sbi	0x08, 4	; 8
     570:	0e 94 ae 01 	call	0x35c	; 0x35c <toggle_e>
     574:	0e 94 ae 01 	call	0x35c	; 0x35c <toggle_e>
     578:	44 98       	cbi	0x08, 4	; 8
     57a:	0e 94 ae 01 	call	0x35c	; 0x35c <toggle_e>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     57e:	10 ef       	ldi	r17, 0xF0	; 240
     580:	81 2f       	mov	r24, r17
     582:	8a 95       	dec	r24
     584:	f1 f7       	brne	.-4      	; 0x582 <lcd_init+0x3e>
     586:	88 e0       	ldi	r24, 0x08	; 8
     588:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     58c:	1a 95       	dec	r17
     58e:	f1 f7       	brne	.-4      	; 0x58c <lcd_init+0x48>
     590:	0e 94 3e 02 	call	0x47c	; 0x47c <lcd_clrscr>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	8a 95       	dec	r24
     598:	f1 f7       	brne	.-4      	; 0x596 <lcd_init+0x52>
     59a:	86 e0       	ldi	r24, 0x06	; 6
     59c:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
     5a0:	80 2f       	mov	r24, r16
     5a2:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	08 95       	ret

000005ac <__vector_20>:
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     5ac:	1f 92       	push	r1
     5ae:	0f 92       	push	r0
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	0f 92       	push	r0
     5b4:	11 24       	eor	r1, r1
     5b6:	2f 93       	push	r18
     5b8:	8f 93       	push	r24
     5ba:	9f 93       	push	r25
     5bc:	ef 93       	push	r30
     5be:	ff 93       	push	r31
    unsigned char tmphead;
    unsigned char data;
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     5c0:	90 91 c0 00 	lds	r25, 0x00C0
    data = UART0_DATA;
     5c4:	20 91 c6 00 	lds	r18, 0x00C6
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     5c8:	e0 91 76 01 	lds	r30, 0x0176
     5cc:	ef 5f       	subi	r30, 0xFF	; 255
     5ce:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
     5d0:	80 91 77 01 	lds	r24, 0x0177
     5d4:	e8 17       	cp	r30, r24
     5d6:	11 f4       	brne	.+4      	; 0x5dc <__vector_20+0x30>
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	08 c0       	rjmp	.+16     	; 0x5ec <__vector_20+0x40>
     5dc:	89 2f       	mov	r24, r25
     5de:	88 71       	andi	r24, 0x18	; 24
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     5e0:	e0 93 76 01 	sts	0x0176, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     5e4:	ff 27       	eor	r31, r31
     5e6:	ec 5a       	subi	r30, 0xAC	; 172
     5e8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ea:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
     5ec:	80 93 78 01 	sts	0x0178, r24
     5f0:	ff 91       	pop	r31
     5f2:	ef 91       	pop	r30
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	2f 91       	pop	r18
     5fa:	0f 90       	pop	r0
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	0f 90       	pop	r0
     600:	1f 90       	pop	r1
     602:	18 95       	reti

00000604 <__vector_21>:
}


SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     604:	1f 92       	push	r1
     606:	0f 92       	push	r0
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	0f 92       	push	r0
     60c:	11 24       	eor	r1, r1
     60e:	8f 93       	push	r24
     610:	9f 93       	push	r25
     612:	ef 93       	push	r30
     614:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     616:	90 91 74 01 	lds	r25, 0x0174
     61a:	80 91 75 01 	lds	r24, 0x0175
     61e:	98 17       	cp	r25, r24
     620:	69 f0       	breq	.+26     	; 0x63c <__vector_21+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     622:	e0 91 75 01 	lds	r30, 0x0175
     626:	ef 5f       	subi	r30, 0xFF	; 255
     628:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
     62a:	e0 93 75 01 	sts	0x0175, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     62e:	ff 27       	eor	r31, r31
     630:	ec 5c       	subi	r30, 0xCC	; 204
     632:	fe 4f       	sbci	r31, 0xFE	; 254
     634:	80 81       	ld	r24, Z
     636:	80 93 c6 00 	sts	0x00C6, r24
     63a:	05 c0       	rjmp	.+10     	; 0x646 <__vector_21+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     63c:	80 91 c1 00 	lds	r24, 0x00C1
     640:	8f 7d       	andi	r24, 0xDF	; 223
     642:	80 93 c1 00 	sts	0x00C1, r24
     646:	ff 91       	pop	r31
     648:	ef 91       	pop	r30
     64a:	9f 91       	pop	r25
     64c:	8f 91       	pop	r24
     64e:	0f 90       	pop	r0
     650:	0f be       	out	0x3f, r0	; 63
     652:	0f 90       	pop	r0
     654:	1f 90       	pop	r1
     656:	18 95       	reti

00000658 <uart_init>:
    }
}


/*************************************************************************
Function: uart_init()
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
     658:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
     65a:	10 92 74 01 	sts	0x0174, r1
    UART_TxTail = 0;
     65e:	10 92 75 01 	sts	0x0175, r1
    UART_RxHead = 0;
     662:	10 92 76 01 	sts	0x0176, r1
    UART_RxTail = 0;
     666:	10 92 77 01 	sts	0x0177, r1
    
#if defined( AT90_UART )
    /* set baud rate */
    UBRR = (unsigned char)baudrate; 

    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
    	 baudrate &= ~0x8000;
    }
    UBRRH = (unsigned char)(baudrate>>8);
    UBRRL = (unsigned char) baudrate;
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
    #else
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
     66a:	97 ff       	sbrs	r25, 7
     66c:	04 c0       	rjmp	.+8      	; 0x676 <uart_init+0x1e>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	80 93 c0 00 	sts	0x00C0, r24
   		baudrate &= ~0x8000;
     674:	3f 77       	andi	r19, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
     676:	83 2f       	mov	r24, r19
     678:	99 27       	eor	r25, r25
     67a:	80 93 c5 00 	sts	0x00C5, r24
    UBRR0L = (unsigned char) baudrate;
     67e:	20 93 c4 00 	sts	0x00C4, r18

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     682:	88 e9       	ldi	r24, 0x98	; 152
     684:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
     688:	86 e0       	ldi	r24, 0x06	; 6
     68a:	80 93 c2 00 	sts	0x00C2, r24
     68e:	08 95       	ret

00000690 <uart_getc>:
    #endif 

#elif defined ( ATMEGA_UART )
    /* set baud rate */
    if ( baudrate & 0x8000 ) 
    {
    	UART0_STATUS = (1<<U2X);  //Enable 2x speed 
    	baudrate &= ~0x8000;
    }
    UBRRHI = (unsigned char)(baudrate>>8);
    UBRR   = (unsigned char) baudrate;

    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */


/*************************************************************************
Function: uart_getc()
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
     690:	90 91 76 01 	lds	r25, 0x0176
     694:	80 91 77 01 	lds	r24, 0x0177
     698:	98 17       	cp	r25, r24
     69a:	19 f4       	brne	.+6      	; 0x6a2 <uart_getc+0x12>
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	08 95       	ret
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     6a2:	e0 91 77 01 	lds	r30, 0x0177
     6a6:	ef 5f       	subi	r30, 0xFF	; 255
     6a8:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
     6aa:	e0 93 77 01 	sts	0x0177, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     6ae:	ff 27       	eor	r31, r31
     6b0:	ec 5a       	subi	r30, 0xAC	; 172
     6b2:	fe 4f       	sbci	r31, 0xFE	; 254
     6b4:	20 81       	ld	r18, Z
    
    return (UART_LastRxError << 8) + data;
     6b6:	80 91 78 01 	lds	r24, 0x0178
     6ba:	99 27       	eor	r25, r25
     6bc:	98 2f       	mov	r25, r24
     6be:	88 27       	eor	r24, r24
     6c0:	82 0f       	add	r24, r18
     6c2:	91 1d       	adc	r25, r1

}/* uart_getc */
     6c4:	08 95       	ret

000006c6 <uart_putc>:


/*************************************************************************
Function: uart_putc()
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
     6c6:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     6c8:	90 91 74 01 	lds	r25, 0x0174
     6cc:	9f 5f       	subi	r25, 0xFF	; 255
     6ce:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     6d0:	80 91 75 01 	lds	r24, 0x0175
     6d4:	98 17       	cp	r25, r24
     6d6:	e1 f3       	breq	.-8      	; 0x6d0 <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     6d8:	e9 2f       	mov	r30, r25
     6da:	ff 27       	eor	r31, r31
     6dc:	ec 5c       	subi	r30, 0xCC	; 204
     6de:	fe 4f       	sbci	r31, 0xFE	; 254
     6e0:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
     6e2:	90 93 74 01 	sts	0x0174, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     6e6:	80 91 c1 00 	lds	r24, 0x00C1
     6ea:	80 62       	ori	r24, 0x20	; 32
     6ec:	80 93 c1 00 	sts	0x00C1, r24
     6f0:	08 95       	ret

000006f2 <uart_puts>:

}/* uart_putc */


/*************************************************************************
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	ec 01       	movw	r28, r24
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <uart_puts+0xe>
    while (*s) 
      uart_putc(*s++);
     6fa:	21 96       	adiw	r28, 0x01	; 1
     6fc:	0e 94 63 03 	call	0x6c6	; 0x6c6 <uart_putc>
     700:	88 81       	ld	r24, Y
     702:	88 23       	and	r24, r24
     704:	d1 f7       	brne	.-12     	; 0x6fa <uart_puts+0x8>
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <uart_puts_p>:

}/* uart_puts */


/*************************************************************************
Function: uart_puts_p()
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	ec 01       	movw	r28, r24
     712:	02 c0       	rjmp	.+4      	; 0x718 <uart_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
     714:	0e 94 63 03 	call	0x6c6	; 0x6c6 <uart_putc>
     718:	fe 01       	movw	r30, r28
     71a:	21 96       	adiw	r28, 0x01	; 1
     71c:	84 91       	lpm	r24, Z
     71e:	88 23       	and	r24, r24
     720:	c9 f7       	brne	.-14     	; 0x714 <uart_puts_p+0x8>
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <__vector_28>:

}/* uart_puts_p */


/*
 * these functions are only for ATmegas with two USART
 */
#if defined( ATMEGA_USART1 )

SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     728:	1f 92       	push	r1
     72a:	0f 92       	push	r0
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	0f 92       	push	r0
     730:	11 24       	eor	r1, r1
     732:	2f 93       	push	r18
     734:	8f 93       	push	r24
     736:	9f 93       	push	r25
     738:	ef 93       	push	r30
     73a:	ff 93       	push	r31
    unsigned char tmphead;
    unsigned char data;
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
     73c:	90 91 c8 00 	lds	r25, 0x00C8
    data = UART1_DATA;
     740:	20 91 ce 00 	lds	r18, 0x00CE
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
        
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     744:	e0 91 bb 01 	lds	r30, 0x01BB
     748:	ef 5f       	subi	r30, 0xFF	; 255
     74a:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
     74c:	80 91 bc 01 	lds	r24, 0x01BC
     750:	e8 17       	cp	r30, r24
     752:	11 f4       	brne	.+4      	; 0x758 <__vector_28+0x30>
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	08 c0       	rjmp	.+16     	; 0x768 <__vector_28+0x40>
     758:	89 2f       	mov	r24, r25
     75a:	88 71       	andi	r24, 0x18	; 24
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
     75c:	e0 93 bb 01 	sts	0x01BB, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
     760:	ff 27       	eor	r31, r31
     762:	e7 56       	subi	r30, 0x67	; 103
     764:	fe 4f       	sbci	r31, 0xFE	; 254
     766:	20 83       	st	Z, r18
    }
    UART1_LastRxError = lastRxError;   
     768:	80 93 bd 01 	sts	0x01BD, r24
     76c:	ff 91       	pop	r31
     76e:	ef 91       	pop	r30
     770:	9f 91       	pop	r25
     772:	8f 91       	pop	r24
     774:	2f 91       	pop	r18
     776:	0f 90       	pop	r0
     778:	0f be       	out	0x3f, r0	; 63
     77a:	0f 90       	pop	r0
     77c:	1f 90       	pop	r1
     77e:	18 95       	reti

00000780 <__vector_29>:
}


SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     780:	1f 92       	push	r1
     782:	0f 92       	push	r0
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	0f 92       	push	r0
     788:	11 24       	eor	r1, r1
     78a:	8f 93       	push	r24
     78c:	9f 93       	push	r25
     78e:	ef 93       	push	r30
     790:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
     792:	90 91 b9 01 	lds	r25, 0x01B9
     796:	80 91 ba 01 	lds	r24, 0x01BA
     79a:	98 17       	cp	r25, r24
     79c:	69 f0       	breq	.+26     	; 0x7b8 <__vector_29+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     79e:	e0 91 ba 01 	lds	r30, 0x01BA
     7a2:	ef 5f       	subi	r30, 0xFF	; 255
     7a4:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
     7a6:	e0 93 ba 01 	sts	0x01BA, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
     7aa:	ff 27       	eor	r31, r31
     7ac:	e7 58       	subi	r30, 0x87	; 135
     7ae:	fe 4f       	sbci	r31, 0xFE	; 254
     7b0:	80 81       	ld	r24, Z
     7b2:	80 93 ce 00 	sts	0x00CE, r24
     7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <__vector_29+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     7b8:	80 91 c9 00 	lds	r24, 0x00C9
     7bc:	8f 7d       	andi	r24, 0xDF	; 223
     7be:	80 93 c9 00 	sts	0x00C9, r24
     7c2:	ff 91       	pop	r31
     7c4:	ef 91       	pop	r30
     7c6:	9f 91       	pop	r25
     7c8:	8f 91       	pop	r24
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	0f 90       	pop	r0
     7d0:	1f 90       	pop	r1
     7d2:	18 95       	reti

000007d4 <uart1_init>:
    }
}


/*************************************************************************
Function: uart1_init()
Purpose:  initialize UART1 and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
     7d4:	9c 01       	movw	r18, r24
    UART1_TxHead = 0;
     7d6:	10 92 b9 01 	sts	0x01B9, r1
    UART1_TxTail = 0;
     7da:	10 92 ba 01 	sts	0x01BA, r1
    UART1_RxHead = 0;
     7de:	10 92 bb 01 	sts	0x01BB, r1
    UART1_RxTail = 0;
     7e2:	10 92 bc 01 	sts	0x01BC, r1
    

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
     7e6:	97 ff       	sbrs	r25, 7
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <uart1_init+0x1e>
    {
    	UART1_STATUS = (1<<U2X1);  //Enable 2x speed 
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	80 93 c8 00 	sts	0x00C8, r24
      baudrate &= ~0x8000;
     7f0:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRR1H = (unsigned char)(baudrate>>8);
     7f2:	83 2f       	mov	r24, r19
     7f4:	99 27       	eor	r25, r25
     7f6:	80 93 cd 00 	sts	0x00CD, r24
    UBRR1L = (unsigned char) baudrate;
     7fa:	20 93 cc 00 	sts	0x00CC, r18

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
     7fe:	88 e9       	ldi	r24, 0x98	; 152
     800:	80 93 c9 00 	sts	0x00C9, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef URSEL1
    UCSR1C = (1<<URSEL1)|(3<<UCSZ10);
    #else
    UCSR1C = (3<<UCSZ10);
     804:	86 e0       	ldi	r24, 0x06	; 6
     806:	80 93 ca 00 	sts	0x00CA, r24
     80a:	08 95       	ret

0000080c <uart1_getc>:
    #endif 
}/* uart_init */


/*************************************************************************
Function: uart1_getc()
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart1_getc(void)
{    
     80c:	90 91 bb 01 	lds	r25, 0x01BB
     810:	80 91 bc 01 	lds	r24, 0x01BC
     814:	98 17       	cp	r25, r24
     816:	19 f4       	brne	.+6      	; 0x81e <uart1_getc+0x12>
    unsigned char tmptail;
    unsigned char data;


    if ( UART1_RxHead == UART1_RxTail ) {
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	08 95       	ret
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
     81e:	e0 91 bc 01 	lds	r30, 0x01BC
     822:	ef 5f       	subi	r30, 0xFF	; 255
     824:	ef 71       	andi	r30, 0x1F	; 31
    UART1_RxTail = tmptail; 
     826:	e0 93 bc 01 	sts	0x01BC, r30
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
     82a:	ff 27       	eor	r31, r31
     82c:	e7 56       	subi	r30, 0x67	; 103
     82e:	fe 4f       	sbci	r31, 0xFE	; 254
     830:	20 81       	ld	r18, Z
    
    return (UART1_LastRxError << 8) + data;
     832:	80 91 bd 01 	lds	r24, 0x01BD
     836:	99 27       	eor	r25, r25
     838:	98 2f       	mov	r25, r24
     83a:	88 27       	eor	r24, r24
     83c:	82 0f       	add	r24, r18
     83e:	91 1d       	adc	r25, r1

}/* uart1_getc */
     840:	08 95       	ret

00000842 <uart1_putc>:


/*************************************************************************
Function: uart1_putc()
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart1_putc(unsigned char data)
{
     842:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
     844:	90 91 b9 01 	lds	r25, 0x01B9
     848:	9f 5f       	subi	r25, 0xFF	; 255
     84a:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
     84c:	80 91 ba 01 	lds	r24, 0x01BA
     850:	98 17       	cp	r25, r24
     852:	e1 f3       	breq	.-8      	; 0x84c <uart1_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
     854:	e9 2f       	mov	r30, r25
     856:	ff 27       	eor	r31, r31
     858:	e7 58       	subi	r30, 0x87	; 135
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	20 83       	st	Z, r18
    UART1_TxHead = tmphead;
     85e:	90 93 b9 01 	sts	0x01B9, r25

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
     862:	80 91 c9 00 	lds	r24, 0x00C9
     866:	80 62       	ori	r24, 0x20	; 32
     868:	80 93 c9 00 	sts	0x00C9, r24
     86c:	08 95       	ret

0000086e <uart1_puts>:

}/* uart1_putc */


/*************************************************************************
Function: uart1_puts()
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	ec 01       	movw	r28, r24
     874:	03 c0       	rjmp	.+6      	; 0x87c <uart1_puts+0xe>
    while (*s) 
      uart1_putc(*s++);
     876:	21 96       	adiw	r28, 0x01	; 1
     878:	0e 94 21 04 	call	0x842	; 0x842 <uart1_putc>
     87c:	88 81       	ld	r24, Y
     87e:	88 23       	and	r24, r24
     880:	d1 f7       	brne	.-12     	; 0x876 <uart1_puts+0x8>
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <uart1_puts_p>:

}/* uart1_puts */


/*************************************************************************
Function: uart1_puts_p()
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	ec 01       	movw	r28, r24
     88e:	02 c0       	rjmp	.+4      	; 0x894 <uart1_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
     890:	0e 94 21 04 	call	0x842	; 0x842 <uart1_putc>
     894:	fe 01       	movw	r30, r28
     896:	21 96       	adiw	r28, 0x01	; 1
     898:	84 91       	lpm	r24, Z
     89a:	88 23       	and	r24, r24
     89c:	c9 f7       	brne	.-14     	; 0x890 <uart1_puts_p+0x8>
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <ADC_Init>:
#include <avr/io.h>
#include "config.h"
void ADC_Init(void) {
     8a4:	80 e4       	ldi	r24, 0x40	; 64
     8a6:	80 93 7c 00 	sts	0x007C, r24
 
  uint16_t result;
 
	ADMUX = (0<<REFS1) | (1<<REFS0);      // AVcc als Referenz benutzen
  //ADMUX = (1<<REFS1) | (1<<REFS0);      // interne Referenzspannung nutzen
  ADCSRA = (1<<ADPS1) | (1<<ADPS0);     // Frequenzvorteiler
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	80 93 7a 00 	sts	0x007A, r24
  ADCSRA |= (1<<ADEN);                  // ADC aktivieren
     8b0:	80 91 7a 00 	lds	r24, 0x007A
     8b4:	80 68       	ori	r24, 0x80	; 128
     8b6:	80 93 7a 00 	sts	0x007A, r24
 
  /* nach Aktivieren des ADC wird ein "Dummy-Readout" empfohlen, man liest
     also einen Wert und verwirft diesen, um den ADC "warmlaufen zu lassen" */
 
  ADCSRA |= (1<<ADSC);                  // eine ADC-Wandlung 
     8ba:	80 91 7a 00 	lds	r24, 0x007A
     8be:	80 64       	ori	r24, 0x40	; 64
     8c0:	80 93 7a 00 	sts	0x007A, r24
  while (ADCSRA & (1<<ADSC) ) {}        // auf Abschluss der Konvertierung warten
     8c4:	80 91 7a 00 	lds	r24, 0x007A
     8c8:	86 fd       	sbrc	r24, 6
     8ca:	fc cf       	rjmp	.-8      	; 0x8c4 <ADC_Init+0x20>
  /* ADCW muss einmal gelesen werden, sonst wird Ergebnis der nächsten
     Wandlung nicht übernommen. */
  result = ADCW;
     8cc:	80 91 78 00 	lds	r24, 0x0078
     8d0:	90 91 79 00 	lds	r25, 0x0079
     8d4:	08 95       	ret

000008d6 <ADC_Read>:
}
 
/* ADC Einzelmessung */
uint16_t ADC_Read( uint8_t channel )
{
     8d6:	90 91 7c 00 	lds	r25, 0x007C
     8da:	90 7e       	andi	r25, 0xE0	; 224
     8dc:	8f 71       	andi	r24, 0x1F	; 31
     8de:	98 2b       	or	r25, r24
     8e0:	90 93 7c 00 	sts	0x007C, r25
  // Kanal waehlen, ohne andere Bits zu beeinflußen
  ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
  ADCSRA |= (1<<ADSC);            // eine Wandlung "single conversion"
     8e4:	80 91 7a 00 	lds	r24, 0x007A
     8e8:	80 64       	ori	r24, 0x40	; 64
     8ea:	80 93 7a 00 	sts	0x007A, r24
  while (ADCSRA & (1<<ADSC) ) {}  // auf Abschluss der Konvertierung warten
     8ee:	80 91 7a 00 	lds	r24, 0x007A
     8f2:	86 fd       	sbrc	r24, 6
     8f4:	fc cf       	rjmp	.-8      	; 0x8ee <ADC_Read+0x18>
  return ADCW;                    // ADC auslesen und zurückgeben
     8f6:	80 91 78 00 	lds	r24, 0x0078
     8fa:	90 91 79 00 	lds	r25, 0x0079
     8fe:	08 95       	ret

00000900 <ADC_Read_Avg>:
}
 
/* ADC Mehrfachmessung mit Mittelwertbbildung */
uint16_t ADC_Read_Avg( uint8_t channel, uint8_t average )
{
     900:	bf 92       	push	r11
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	b8 2e       	mov	r11, r24
     910:	c6 2e       	mov	r12, r22
     912:	ee 24       	eor	r14, r14
     914:	ff 24       	eor	r15, r15
     916:	87 01       	movw	r16, r14
     918:	dd 24       	eor	r13, r13
     91a:	0a c0       	rjmp	.+20     	; 0x930 <ADC_Read_Avg+0x30>
  uint32_t result = 0;
 
  for (uint8_t i = 0; i < average; ++i )
    result += ADC_Read( channel );
     91c:	8b 2d       	mov	r24, r11
     91e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <ADC_Read>
     922:	aa 27       	eor	r26, r26
     924:	bb 27       	eor	r27, r27
     926:	e8 0e       	add	r14, r24
     928:	f9 1e       	adc	r15, r25
     92a:	0a 1f       	adc	r16, r26
     92c:	1b 1f       	adc	r17, r27
     92e:	d3 94       	inc	r13
     930:	dc 14       	cp	r13, r12
     932:	a1 f7       	brne	.-24     	; 0x91c <ADC_Read_Avg+0x1c>
     934:	2c 2d       	mov	r18, r12
     936:	33 27       	eor	r19, r19
     938:	44 27       	eor	r20, r20
     93a:	55 27       	eor	r21, r21
     93c:	c8 01       	movw	r24, r16
     93e:	b7 01       	movw	r22, r14
     940:	0e 94 99 0a 	call	0x1532	; 0x1532 <__udivmodsi4>
     944:	da 01       	movw	r26, r20
     946:	c9 01       	movw	r24, r18
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	bf 90       	pop	r11
     956:	08 95       	ret

00000958 <clock_init>:
uint8_t dcf_synchron =0;
zeit uhrzeit;

void clock_init(void)
{
     958:	10 92 1c 02 	sts	0x021C, r1
	uhrzeit.snc = 0;
	uhrzeit.d = 0;
     95c:	10 92 18 02 	sts	0x0218, r1
	uhrzeit.mon = 0;
     960:	10 92 19 02 	sts	0x0219, r1
	uhrzeit.y = 11;
     964:	8b e0       	ldi	r24, 0x0B	; 11
     966:	80 93 1a 02 	sts	0x021A, r24

	uhrzeit.h = 0;
     96a:	10 92 16 02 	sts	0x0216, r1
	uhrzeit.m = 0;
     96e:	10 92 15 02 	sts	0x0215, r1
	uhrzeit.s = 0;
     972:	10 92 14 02 	sts	0x0214, r1
     976:	08 95       	ret

00000978 <clock_refresh>:
}

//String der mit Formatierung HH:MM:SS
//00:00:00
void s8_zeit(zeit uhrzeit, char* string)
{
	// Speichern für itoa
	char buffer[3];

	if(uhrzeit.h >9)
	{
		itoa(uhrzeit.h, buffer,10);
		strcat(string, buffer);
	}
	else
	{
		string[0] = ' ';
		itoa(uhrzeit.h, buffer,10);
		strcat(string, buffer);
	}
	string[2] = ':';
	if(uhrzeit.m >9)
	{
		itoa(uhrzeit.m, buffer,10);
		strcat(string, buffer);
	}
	else
	{
		string[3] = '0';
		itoa(uhrzeit.m, buffer,10);
		strcat(string, buffer);
	}
	string[5] = ':';
	if(uhrzeit.s >9)
	{
		itoa(uhrzeit.s, buffer,10);
		strcat(string, buffer);
	}
	else
	{
		string[6] = '0';
		itoa(uhrzeit.s, buffer,10);
		strcat(string, buffer);
	}
	string[8]='\0';
}
//String der mit Formatierung WT TT.MM.JJ HH:MM:SS
//Mo 00.00.00 00:00:00
void s20_zeit(zeit uhrzeit, char* string)
{
	// Speichern für itoa
	char buffer[3];

	// Wochentag
	switch(uhrzeit.dow)
	{
		case 1:
			strcat(string, "Mo");
		break;
		case 2:
			strcat(string, "Di");
		break;
		case 3:
			strcat(string, "Mi");
		break;
		case 4:
			strcat(string, "Do");
		break;
		case 5:
			strcat(string, "Fr");
		break;
		case 6:
			strcat(string, "Sa");
		break;
		case 7:
			strcat(string, "So");
		break;
		default:
			strcat(string, "ND");
		break;
	}
	string[2] = ' ';
	if(uhrzeit.d >9)
	{
		itoa(uhrzeit.d, buffer,10);
		strcat(string, buffer);
	}
	else
	{
		string[3] = ' ';
		itoa(uhrzeit.d, buffer,10);
		strcat(string, buffer);
	}
	string[5] = '.';
	if(uhrzeit.mon >9)
	{
		itoa(uhrzeit.mon, buffer,10);
		strcat(string, buffer);
	}
	else
	{
		string[6] = '0';
		itoa(uhrzeit.mon, buffer,10);
		strcat(string, buffer);
	}

	string[8] = '.';
	if(uhrzeit.y >9)
	{
		itoa(uhrzeit.y, buffer,10);
		strcat(string, buffer);
	}
	else
	{
		string[9] = '0';
		itoa(uhrzeit.y, buffer,10);
		strcat(string, buffer);
	}
	string[11] = ' ';
	if(uhrzeit.h >9)
	{
		itoa(uhrzeit.h, buffer,10);
		strcat(string, buffer);
	}
	else
	{
		string[12] = ' ';
		itoa(uhrzeit.h, buffer,10);
		strcat(string, buffer);
	}
	string[14] = ':';
	if(uhrzeit.m >9)
	{
		itoa(uhrzeit.m, buffer,10);
		strcat(string, buffer);
	}
	else
	{
		string[15] = '0';
		itoa(uhrzeit.m, buffer,10);
		strcat(string, buffer);
	}
	string[17] = ':';
	if(uhrzeit.s >9)
	{
		itoa(uhrzeit.s, buffer,10);
		strcat(string, buffer);
	}
	else
	{
		string[18] = '0';
		itoa(uhrzeit.s, buffer,10);
		strcat(string, buffer);
	}
	string[20]='\0';
	return;
}
void clock_refresh(void)
{
     978:	80 91 c5 01 	lds	r24, 0x01C5
     97c:	88 23       	and	r24, r24
     97e:	09 f4       	brne	.+2      	; 0x982 <clock_refresh+0xa>
     980:	32 c1       	rjmp	.+612    	; 0xbe6 <clock_refresh+0x26e>
	if(I_DCF_new)
	{
		cli();
     982:	f8 94       	cli
		int16_t DCF_dauer = I_DCF_P_DAUER;
     984:	20 91 c3 01 	lds	r18, 0x01C3
     988:	30 91 c4 01 	lds	r19, 0x01C4
		sei();
     98c:	78 94       	sei

		if(DCF_dauer >50 && (DCF_dauer <150))
     98e:	c9 01       	movw	r24, r18
     990:	c3 97       	sbiw	r24, 0x33	; 51
     992:	83 36       	cpi	r24, 0x63	; 99
     994:	91 05       	cpc	r25, r1
     996:	50 f4       	brcc	.+20     	; 0x9ac <clock_refresh+0x34>
		{
			time_n[dcf_i] = 0;
     998:	80 91 be 01 	lds	r24, 0x01BE
     99c:	e8 2f       	mov	r30, r24
     99e:	ff 27       	eor	r31, r31
     9a0:	e8 52       	subi	r30, 0x28	; 40
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	10 82       	st	Z, r1
			dcf_i++;
     9a6:	8f 5f       	subi	r24, 0xFF	; 255
     9a8:	80 93 be 01 	sts	0x01BE, r24
		}
		if(DCF_dauer >150 && (DCF_dauer <250))
     9ac:	c9 01       	movw	r24, r18
     9ae:	87 59       	subi	r24, 0x97	; 151
     9b0:	90 40       	sbci	r25, 0x00	; 0
     9b2:	83 36       	cpi	r24, 0x63	; 99
     9b4:	91 05       	cpc	r25, r1
     9b6:	58 f4       	brcc	.+22     	; 0x9ce <clock_refresh+0x56>
		{
			time_n[dcf_i] = 1;
     9b8:	80 91 be 01 	lds	r24, 0x01BE
     9bc:	e8 2f       	mov	r30, r24
     9be:	ff 27       	eor	r31, r31
     9c0:	e8 52       	subi	r30, 0x28	; 40
     9c2:	fe 4f       	sbci	r31, 0xFE	; 254
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	90 83       	st	Z, r25
			dcf_i++;
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
     9ca:	80 93 be 01 	sts	0x01BE, r24
		}
		if(DCF_dauer >1700)
     9ce:	25 5a       	subi	r18, 0xA5	; 165
     9d0:	36 40       	sbci	r19, 0x06	; 6
     9d2:	0c f4       	brge	.+2      	; 0x9d6 <clock_refresh+0x5e>
     9d4:	00 c1       	rjmp	.+512    	; 0xbd6 <clock_refresh+0x25e>
		{
			dcf_i = 0;
     9d6:	10 92 be 01 	sts	0x01BE, r1
			//TODO Paritätsbits prüfen und Fehlerabgleich mit alter Uhrzeit, fals vorhanden;
			if(uhrzeit.snc >= 1)
     9da:	80 91 1c 02 	lds	r24, 0x021C
     9de:	88 23       	and	r24, r24
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <clock_refresh+0x6c>
     9e2:	f5 c0       	rjmp	.+490    	; 0xbce <clock_refresh+0x256>
     9e4:	e8 ed       	ldi	r30, 0xD8	; 216
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	ad e1       	ldi	r26, 0x1D	; 29
     9ea:	b2 e0       	ldi	r27, 0x02	; 2
			{


				
				for(uint8_t i = 0; i <60; i++)
				{
					time[i] = time_n[i];
     9ec:	81 91       	ld	r24, Z+
     9ee:	8d 93       	st	X+, r24
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	e4 31       	cpi	r30, 0x14	; 20
     9f4:	f8 07       	cpc	r31, r24
     9f6:	d1 f7       	brne	.-12     	; 0x9ec <clock_refresh+0x74>
				}

				uhrzeit.m = time[21]+2*time[22]+4*time[23]+8*time[24]+ 10*(time[25]+2*time[26]+4*time[27]);
     9f8:	30 91 36 02 	lds	r19, 0x0236
     9fc:	80 91 38 02 	lds	r24, 0x0238
     a00:	99 27       	eor	r25, r25
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	20 91 37 02 	lds	r18, 0x0237
     a0a:	82 0f       	add	r24, r18
     a0c:	91 1d       	adc	r25, r1
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	83 0f       	add	r24, r19
     a14:	91 1d       	adc	r25, r1
     a16:	9c 01       	movw	r18, r24
     a18:	22 0f       	add	r18, r18
     a1a:	33 1f       	adc	r19, r19
     a1c:	22 0f       	add	r18, r18
     a1e:	33 1f       	adc	r19, r19
     a20:	28 0f       	add	r18, r24
     a22:	39 1f       	adc	r19, r25
     a24:	80 91 35 02 	lds	r24, 0x0235
     a28:	99 27       	eor	r25, r25
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	40 91 34 02 	lds	r20, 0x0234
     a32:	84 0f       	add	r24, r20
     a34:	91 1d       	adc	r25, r1
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	40 91 33 02 	lds	r20, 0x0233
     a3e:	84 0f       	add	r24, r20
     a40:	91 1d       	adc	r25, r1
     a42:	28 0f       	add	r18, r24
     a44:	39 1f       	adc	r19, r25
     a46:	22 0f       	add	r18, r18
     a48:	33 1f       	adc	r19, r19
     a4a:	80 91 32 02 	lds	r24, 0x0232
     a4e:	82 0f       	add	r24, r18
     a50:	80 93 15 02 	sts	0x0215, r24
				uhrzeit.h = time[29]+2*time[30]+4*time[31]+8*time[32]+ 10*(time[33]+2*time[34]);
     a54:	20 91 3e 02 	lds	r18, 0x023E
     a58:	80 91 3f 02 	lds	r24, 0x023F
     a5c:	99 27       	eor	r25, r25
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	82 0f       	add	r24, r18
     a64:	91 1d       	adc	r25, r1
     a66:	9c 01       	movw	r18, r24
     a68:	22 0f       	add	r18, r18
     a6a:	33 1f       	adc	r19, r19
     a6c:	22 0f       	add	r18, r18
     a6e:	33 1f       	adc	r19, r19
     a70:	28 0f       	add	r18, r24
     a72:	39 1f       	adc	r19, r25
     a74:	80 91 3d 02 	lds	r24, 0x023D
     a78:	99 27       	eor	r25, r25
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	40 91 3c 02 	lds	r20, 0x023C
     a82:	84 0f       	add	r24, r20
     a84:	91 1d       	adc	r25, r1
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	40 91 3b 02 	lds	r20, 0x023B
     a8e:	84 0f       	add	r24, r20
     a90:	91 1d       	adc	r25, r1
     a92:	28 0f       	add	r18, r24
     a94:	39 1f       	adc	r19, r25
     a96:	22 0f       	add	r18, r18
     a98:	33 1f       	adc	r19, r19
     a9a:	80 91 3a 02 	lds	r24, 0x023A
     a9e:	82 0f       	add	r24, r18
     aa0:	80 93 16 02 	sts	0x0216, r24
				uhrzeit.d = time[36]+2*time[37]+4*time[38]+8*time[39]+ 10*(time[40]+2*time[41]);
     aa4:	20 91 45 02 	lds	r18, 0x0245
     aa8:	80 91 46 02 	lds	r24, 0x0246
     aac:	99 27       	eor	r25, r25
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	82 0f       	add	r24, r18
     ab4:	91 1d       	adc	r25, r1
     ab6:	9c 01       	movw	r18, r24
     ab8:	22 0f       	add	r18, r18
     aba:	33 1f       	adc	r19, r19
     abc:	22 0f       	add	r18, r18
     abe:	33 1f       	adc	r19, r19
     ac0:	28 0f       	add	r18, r24
     ac2:	39 1f       	adc	r19, r25
     ac4:	80 91 44 02 	lds	r24, 0x0244
     ac8:	99 27       	eor	r25, r25
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	40 91 43 02 	lds	r20, 0x0243
     ad2:	84 0f       	add	r24, r20
     ad4:	91 1d       	adc	r25, r1
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	40 91 42 02 	lds	r20, 0x0242
     ade:	84 0f       	add	r24, r20
     ae0:	91 1d       	adc	r25, r1
     ae2:	28 0f       	add	r18, r24
     ae4:	39 1f       	adc	r19, r25
     ae6:	22 0f       	add	r18, r18
     ae8:	33 1f       	adc	r19, r19
     aea:	80 91 41 02 	lds	r24, 0x0241
     aee:	82 0f       	add	r24, r18
     af0:	80 93 18 02 	sts	0x0218, r24
				uhrzeit.dow = time[42]+2*time[43]+4*time[44];
     af4:	80 91 49 02 	lds	r24, 0x0249
     af8:	99 27       	eor	r25, r25
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	20 91 48 02 	lds	r18, 0x0248
     b02:	82 0f       	add	r24, r18
     b04:	91 1d       	adc	r25, r1
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	20 91 47 02 	lds	r18, 0x0247
     b0e:	28 0f       	add	r18, r24
     b10:	20 93 17 02 	sts	0x0217, r18
				uhrzeit.mon = time[45]+2*time[46]+4*time[47]+8*time[48]+ 10*(time[49]);
     b14:	80 91 4d 02 	lds	r24, 0x024D
     b18:	99 27       	eor	r25, r25
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	20 91 4c 02 	lds	r18, 0x024C
     b22:	82 0f       	add	r24, r18
     b24:	91 1d       	adc	r25, r1
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	50 91 4b 02 	lds	r21, 0x024B
     b2e:	20 91 4e 02 	lds	r18, 0x024E
     b32:	45 e0       	ldi	r20, 0x05	; 5
     b34:	24 9f       	mul	r18, r20
     b36:	90 01       	movw	r18, r0
     b38:	11 24       	eor	r1, r1
     b3a:	25 0f       	add	r18, r21
     b3c:	31 1d       	adc	r19, r1
     b3e:	82 0f       	add	r24, r18
     b40:	93 1f       	adc	r25, r19
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	20 91 4a 02 	lds	r18, 0x024A
     b4a:	28 0f       	add	r18, r24
     b4c:	20 93 19 02 	sts	0x0219, r18
				uhrzeit.y = time[50]+2*time[51]+4*time[52]+8*time[53]+ 10*(time[54]+2*time[55]+4*time[56]+8*time[57]);
     b50:	30 91 53 02 	lds	r19, 0x0253
     b54:	80 91 56 02 	lds	r24, 0x0256
     b58:	99 27       	eor	r25, r25
     b5a:	88 0f       	add	r24, r24
     b5c:	99 1f       	adc	r25, r25
     b5e:	20 91 55 02 	lds	r18, 0x0255
     b62:	82 0f       	add	r24, r18
     b64:	91 1d       	adc	r25, r1
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	20 91 54 02 	lds	r18, 0x0254
     b6e:	82 0f       	add	r24, r18
     b70:	91 1d       	adc	r25, r1
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	83 0f       	add	r24, r19
     b78:	91 1d       	adc	r25, r1
     b7a:	9c 01       	movw	r18, r24
     b7c:	22 0f       	add	r18, r18
     b7e:	33 1f       	adc	r19, r19
     b80:	22 0f       	add	r18, r18
     b82:	33 1f       	adc	r19, r19
     b84:	28 0f       	add	r18, r24
     b86:	39 1f       	adc	r19, r25
     b88:	80 91 52 02 	lds	r24, 0x0252
     b8c:	99 27       	eor	r25, r25
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	40 91 51 02 	lds	r20, 0x0251
     b96:	84 0f       	add	r24, r20
     b98:	91 1d       	adc	r25, r1
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	40 91 50 02 	lds	r20, 0x0250
     ba2:	84 0f       	add	r24, r20
     ba4:	91 1d       	adc	r25, r1
     ba6:	28 0f       	add	r18, r24
     ba8:	39 1f       	adc	r19, r25
     baa:	22 0f       	add	r18, r18
     bac:	33 1f       	adc	r19, r19
     bae:	80 91 4f 02 	lds	r24, 0x024F
     bb2:	82 0f       	add	r24, r18
     bb4:	80 93 1a 02 	sts	0x021A, r24
				uhrzeit.s = 0;
     bb8:	10 92 14 02 	sts	0x0214, r1
				flag_10ms = 9;
     bbc:	89 e0       	ldi	r24, 0x09	; 9
     bbe:	80 93 14 01 	sts	0x0114, r24
				flag_100ms = 9;
     bc2:	80 93 15 01 	sts	0x0115, r24
				flag_1s = 9;
     bc6:	80 93 16 01 	sts	0x0116, r24
				
				uhrzeit.snc = 2;
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	01 c0       	rjmp	.+2      	; 0xbd0 <clock_refresh+0x258>
			}
			else
			{
				uhrzeit.snc = 1;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	80 93 1c 02 	sts	0x021C, r24
     bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <clock_refresh+0x26a>
			}
		}
		if(DCF_dauer > 3000)
		{
			
		}
		if(dcf_i >=60)
     bd6:	80 91 be 01 	lds	r24, 0x01BE
     bda:	8c 33       	cpi	r24, 0x3C	; 60
     bdc:	10 f0       	brcs	.+4      	; 0xbe2 <clock_refresh+0x26a>
		{
			dcf_i = 0;
     bde:	10 92 be 01 	sts	0x01BE, r1
		}
		if (uhrzeit.snc >= 2)
		{
			//uhrzeit.s = dcf_i -1;
		}
		I_DCF_new =0;
     be2:	10 92 c5 01 	sts	0x01C5, r1
     be6:	08 95       	ret

00000be8 <check_parity>:
	}
}
uint8_t	check_parity(uint8_t value)
{
     be8:	28 2f       	mov	r18, r24
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <check_parity+0xe>
	uint8_t	even_parity = 0;

	while(value)
	{
		even_parity ^= (value & 0x01);
     bee:	82 2f       	mov	r24, r18
     bf0:	81 70       	andi	r24, 0x01	; 1
     bf2:	98 27       	eor	r25, r24
		value >>= 1; 
     bf4:	26 95       	lsr	r18
     bf6:	22 23       	and	r18, r18
     bf8:	d1 f7       	brne	.-12     	; 0xbee <check_parity+0x6>
	};
	return even_parity;

}
     bfa:	89 2f       	mov	r24, r25
     bfc:	99 27       	eor	r25, r25
     bfe:	08 95       	ret

00000c00 <clock_tick>:
void clock_tick(void)
{
     c00:	80 91 14 02 	lds	r24, 0x0214
     c04:	8f 5f       	subi	r24, 0xFF	; 255
     c06:	80 93 14 02 	sts	0x0214, r24
	uhrzeit.s++;
	// Etwas überhang einplanen falls die wir mal zu schnell laufen
	if(uhrzeit.s >60)
     c0a:	8d 33       	cpi	r24, 0x3D	; 61
     c0c:	c0 f0       	brcs	.+48     	; 0xc3e <clock_tick+0x3e>
	{
		uhrzeit.s = 1;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	80 93 14 02 	sts	0x0214, r24
		uhrzeit.m++;
     c14:	80 91 15 02 	lds	r24, 0x0215
     c18:	8f 5f       	subi	r24, 0xFF	; 255
     c1a:	80 93 15 02 	sts	0x0215, r24
		if(uhrzeit.m >= 60)
     c1e:	8c 33       	cpi	r24, 0x3C	; 60
     c20:	70 f0       	brcs	.+28     	; 0xc3e <clock_tick+0x3e>
		{
			uhrzeit.m = 0;
     c22:	10 92 15 02 	sts	0x0215, r1
			uhrzeit.h++;
     c26:	80 91 16 02 	lds	r24, 0x0216
     c2a:	8f 5f       	subi	r24, 0xFF	; 255
     c2c:	80 93 16 02 	sts	0x0216, r24
			if(uhrzeit.h >= 24)
     c30:	88 31       	cpi	r24, 0x18	; 24
     c32:	28 f0       	brcs	.+10     	; 0xc3e <clock_tick+0x3e>
			{
				uhrzeit.d++;
     c34:	80 91 18 02 	lds	r24, 0x0218
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	80 93 18 02 	sts	0x0218, r24
     c3e:	08 95       	ret

00000c40 <s20_zeit>:
     c40:	8f 92       	push	r8
     c42:	9f 92       	push	r9
     c44:	af 92       	push	r10
     c46:	bf 92       	push	r11
     c48:	cf 92       	push	r12
     c4a:	df 92       	push	r13
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	2c 97       	sbiw	r28, 0x0c	; 12
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	0c 83       	std	Y+4, r16	; 0x04
     c6a:	1d 83       	std	Y+5, r17	; 0x05
     c6c:	2e 83       	std	Y+6, r18	; 0x06
     c6e:	3f 83       	std	Y+7, r19	; 0x07
     c70:	48 87       	std	Y+8, r20	; 0x08
     c72:	59 87       	std	Y+9, r21	; 0x09
     c74:	6a 87       	std	Y+10, r22	; 0x0a
     c76:	7b 87       	std	Y+11, r23	; 0x0b
     c78:	8c 87       	std	Y+12, r24	; 0x0c
     c7a:	87 01       	movw	r16, r14
     c7c:	8c 80       	ldd	r8, Y+4	; 0x04
     c7e:	9d 80       	ldd	r9, Y+5	; 0x05
     c80:	a2 2e       	mov	r10, r18
     c82:	b6 2e       	mov	r11, r22
     c84:	e5 2e       	mov	r14, r21
     c86:	f4 2e       	mov	r15, r20
     c88:	34 30       	cpi	r19, 0x04	; 4
     c8a:	c9 f0       	breq	.+50     	; 0xcbe <s20_zeit+0x7e>
     c8c:	35 30       	cpi	r19, 0x05	; 5
     c8e:	38 f4       	brcc	.+14     	; 0xc9e <s20_zeit+0x5e>
     c90:	32 30       	cpi	r19, 0x02	; 2
     c92:	79 f0       	breq	.+30     	; 0xcb2 <s20_zeit+0x72>
     c94:	33 30       	cpi	r19, 0x03	; 3
     c96:	80 f4       	brcc	.+32     	; 0xcb8 <s20_zeit+0x78>
     c98:	31 30       	cpi	r19, 0x01	; 1
     c9a:	e9 f4       	brne	.+58     	; 0xcd6 <s20_zeit+0x96>
     c9c:	07 c0       	rjmp	.+14     	; 0xcac <s20_zeit+0x6c>
     c9e:	36 30       	cpi	r19, 0x06	; 6
     ca0:	a1 f0       	breq	.+40     	; 0xcca <s20_zeit+0x8a>
     ca2:	36 30       	cpi	r19, 0x06	; 6
     ca4:	78 f0       	brcs	.+30     	; 0xcc4 <s20_zeit+0x84>
     ca6:	37 30       	cpi	r19, 0x07	; 7
     ca8:	b1 f4       	brne	.+44     	; 0xcd6 <s20_zeit+0x96>
     caa:	12 c0       	rjmp	.+36     	; 0xcd0 <s20_zeit+0x90>
     cac:	67 e1       	ldi	r22, 0x17	; 23
     cae:	71 e0       	ldi	r23, 0x01	; 1
     cb0:	14 c0       	rjmp	.+40     	; 0xcda <s20_zeit+0x9a>
     cb2:	6a e1       	ldi	r22, 0x1A	; 26
     cb4:	71 e0       	ldi	r23, 0x01	; 1
     cb6:	11 c0       	rjmp	.+34     	; 0xcda <s20_zeit+0x9a>
     cb8:	6d e1       	ldi	r22, 0x1D	; 29
     cba:	71 e0       	ldi	r23, 0x01	; 1
     cbc:	0e c0       	rjmp	.+28     	; 0xcda <s20_zeit+0x9a>
     cbe:	60 e2       	ldi	r22, 0x20	; 32
     cc0:	71 e0       	ldi	r23, 0x01	; 1
     cc2:	0b c0       	rjmp	.+22     	; 0xcda <s20_zeit+0x9a>
     cc4:	63 e2       	ldi	r22, 0x23	; 35
     cc6:	71 e0       	ldi	r23, 0x01	; 1
     cc8:	08 c0       	rjmp	.+16     	; 0xcda <s20_zeit+0x9a>
     cca:	66 e2       	ldi	r22, 0x26	; 38
     ccc:	71 e0       	ldi	r23, 0x01	; 1
     cce:	05 c0       	rjmp	.+10     	; 0xcda <s20_zeit+0x9a>
     cd0:	69 e2       	ldi	r22, 0x29	; 41
     cd2:	71 e0       	ldi	r23, 0x01	; 1
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <s20_zeit+0x9a>
     cd6:	6c e2       	ldi	r22, 0x2C	; 44
     cd8:	71 e0       	ldi	r23, 0x01	; 1
     cda:	c8 01       	movw	r24, r16
     cdc:	0e 94 4a 0a 	call	0x1494	; 0x1494 <strcat>
     ce0:	20 e2       	ldi	r18, 0x20	; 32
     ce2:	f8 01       	movw	r30, r16
     ce4:	22 83       	std	Z+2, r18	; 0x02
     ce6:	8f 2d       	mov	r24, r15
     ce8:	99 27       	eor	r25, r25
     cea:	6e 01       	movw	r12, r28
     cec:	08 94       	sec
     cee:	c1 1c       	adc	r12, r1
     cf0:	d1 1c       	adc	r13, r1
     cf2:	f9 e0       	ldi	r31, 0x09	; 9
     cf4:	ff 15       	cp	r31, r15
     cf6:	10 f0       	brcs	.+4      	; 0xcfc <s20_zeit+0xbc>
     cf8:	f8 01       	movw	r30, r16
     cfa:	23 83       	std	Z+3, r18	; 0x03
     cfc:	4a e0       	ldi	r20, 0x0A	; 10
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	b6 01       	movw	r22, r12
     d02:	0e 94 55 0a 	call	0x14aa	; 0x14aa <itoa>
     d06:	b6 01       	movw	r22, r12
     d08:	c8 01       	movw	r24, r16
     d0a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <strcat>
     d0e:	8e e2       	ldi	r24, 0x2E	; 46
     d10:	f8 01       	movw	r30, r16
     d12:	85 83       	std	Z+5, r24	; 0x05
     d14:	6e 01       	movw	r12, r28
     d16:	08 94       	sec
     d18:	c1 1c       	adc	r12, r1
     d1a:	d1 1c       	adc	r13, r1
     d1c:	2e 2d       	mov	r18, r14
     d1e:	33 27       	eor	r19, r19
     d20:	f9 e0       	ldi	r31, 0x09	; 9
     d22:	fe 15       	cp	r31, r14
     d24:	18 f0       	brcs	.+6      	; 0xd2c <s20_zeit+0xec>
     d26:	80 e3       	ldi	r24, 0x30	; 48
     d28:	f8 01       	movw	r30, r16
     d2a:	86 83       	std	Z+6, r24	; 0x06
     d2c:	4a e0       	ldi	r20, 0x0A	; 10
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	b6 01       	movw	r22, r12
     d32:	c9 01       	movw	r24, r18
     d34:	0e 94 55 0a 	call	0x14aa	; 0x14aa <itoa>
     d38:	b6 01       	movw	r22, r12
     d3a:	c8 01       	movw	r24, r16
     d3c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <strcat>
     d40:	8e e2       	ldi	r24, 0x2E	; 46
     d42:	f8 01       	movw	r30, r16
     d44:	80 87       	std	Z+8, r24	; 0x08
     d46:	6e 01       	movw	r12, r28
     d48:	08 94       	sec
     d4a:	c1 1c       	adc	r12, r1
     d4c:	d1 1c       	adc	r13, r1
     d4e:	2b 2d       	mov	r18, r11
     d50:	33 27       	eor	r19, r19
     d52:	f9 e0       	ldi	r31, 0x09	; 9
     d54:	fb 15       	cp	r31, r11
     d56:	18 f0       	brcs	.+6      	; 0xd5e <s20_zeit+0x11e>
     d58:	80 e3       	ldi	r24, 0x30	; 48
     d5a:	f8 01       	movw	r30, r16
     d5c:	81 87       	std	Z+9, r24	; 0x09
     d5e:	4a e0       	ldi	r20, 0x0A	; 10
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	b6 01       	movw	r22, r12
     d64:	c9 01       	movw	r24, r18
     d66:	0e 94 55 0a 	call	0x14aa	; 0x14aa <itoa>
     d6a:	b6 01       	movw	r22, r12
     d6c:	c8 01       	movw	r24, r16
     d6e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <strcat>
     d72:	20 e2       	ldi	r18, 0x20	; 32
     d74:	f8 01       	movw	r30, r16
     d76:	23 87       	std	Z+11, r18	; 0x0b
     d78:	6e 01       	movw	r12, r28
     d7a:	08 94       	sec
     d7c:	c1 1c       	adc	r12, r1
     d7e:	d1 1c       	adc	r13, r1
     d80:	8a 2d       	mov	r24, r10
     d82:	99 27       	eor	r25, r25
     d84:	f9 e0       	ldi	r31, 0x09	; 9
     d86:	fa 15       	cp	r31, r10
     d88:	10 f0       	brcs	.+4      	; 0xd8e <s20_zeit+0x14e>
     d8a:	f8 01       	movw	r30, r16
     d8c:	24 87       	std	Z+12, r18	; 0x0c
     d8e:	4a e0       	ldi	r20, 0x0A	; 10
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	b6 01       	movw	r22, r12
     d94:	0e 94 55 0a 	call	0x14aa	; 0x14aa <itoa>
     d98:	b6 01       	movw	r22, r12
     d9a:	c8 01       	movw	r24, r16
     d9c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <strcat>
     da0:	8a e3       	ldi	r24, 0x3A	; 58
     da2:	f8 01       	movw	r30, r16
     da4:	86 87       	std	Z+14, r24	; 0x0e
     da6:	6e 01       	movw	r12, r28
     da8:	08 94       	sec
     daa:	c1 1c       	adc	r12, r1
     dac:	d1 1c       	adc	r13, r1
     dae:	29 2d       	mov	r18, r9
     db0:	33 27       	eor	r19, r19
     db2:	f9 e0       	ldi	r31, 0x09	; 9
     db4:	f9 15       	cp	r31, r9
     db6:	18 f0       	brcs	.+6      	; 0xdbe <s20_zeit+0x17e>
     db8:	80 e3       	ldi	r24, 0x30	; 48
     dba:	f8 01       	movw	r30, r16
     dbc:	87 87       	std	Z+15, r24	; 0x0f
     dbe:	4a e0       	ldi	r20, 0x0A	; 10
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	b6 01       	movw	r22, r12
     dc4:	c9 01       	movw	r24, r18
     dc6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <itoa>
     dca:	b6 01       	movw	r22, r12
     dcc:	c8 01       	movw	r24, r16
     dce:	0e 94 4a 0a 	call	0x1494	; 0x1494 <strcat>
     dd2:	8a e3       	ldi	r24, 0x3A	; 58
     dd4:	f8 01       	movw	r30, r16
     dd6:	81 8b       	std	Z+17, r24	; 0x11
     dd8:	6e 01       	movw	r12, r28
     dda:	08 94       	sec
     ddc:	c1 1c       	adc	r12, r1
     dde:	d1 1c       	adc	r13, r1
     de0:	28 2d       	mov	r18, r8
     de2:	33 27       	eor	r19, r19
     de4:	f9 e0       	ldi	r31, 0x09	; 9
     de6:	f8 15       	cp	r31, r8
     de8:	18 f0       	brcs	.+6      	; 0xdf0 <s20_zeit+0x1b0>
     dea:	80 e3       	ldi	r24, 0x30	; 48
     dec:	f8 01       	movw	r30, r16
     dee:	82 8b       	std	Z+18, r24	; 0x12
     df0:	4a e0       	ldi	r20, 0x0A	; 10
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	b6 01       	movw	r22, r12
     df6:	c9 01       	movw	r24, r18
     df8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <itoa>
     dfc:	b6 01       	movw	r22, r12
     dfe:	c8 01       	movw	r24, r16
     e00:	0e 94 4a 0a 	call	0x1494	; 0x1494 <strcat>
     e04:	f8 01       	movw	r30, r16
     e06:	14 8a       	std	Z+20, r1	; 0x14
     e08:	2c 96       	adiw	r28, 0x0c	; 12
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	df 90       	pop	r13
     e22:	cf 90       	pop	r12
     e24:	bf 90       	pop	r11
     e26:	af 90       	pop	r10
     e28:	9f 90       	pop	r9
     e2a:	8f 90       	pop	r8
     e2c:	08 95       	ret

00000e2e <s8_zeit>:
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	2c 97       	sbiw	r28, 0x0c	; 12
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	0c 83       	std	Y+4, r16	; 0x04
     e50:	1d 83       	std	Y+5, r17	; 0x05
     e52:	2e 83       	std	Y+6, r18	; 0x06
     e54:	3f 83       	std	Y+7, r19	; 0x07
     e56:	48 87       	std	Y+8, r20	; 0x08
     e58:	59 87       	std	Y+9, r21	; 0x09
     e5a:	6a 87       	std	Y+10, r22	; 0x0a
     e5c:	7b 87       	std	Y+11, r23	; 0x0b
     e5e:	8c 87       	std	Y+12, r24	; 0x0c
     e60:	87 01       	movw	r16, r14
     e62:	cc 80       	ldd	r12, Y+4	; 0x04
     e64:	dd 80       	ldd	r13, Y+5	; 0x05
     e66:	82 2f       	mov	r24, r18
     e68:	33 27       	eor	r19, r19
     e6a:	7e 01       	movw	r14, r28
     e6c:	08 94       	sec
     e6e:	e1 1c       	adc	r14, r1
     e70:	f1 1c       	adc	r15, r1
     e72:	8a 30       	cpi	r24, 0x0A	; 10
     e74:	18 f4       	brcc	.+6      	; 0xe7c <s8_zeit+0x4e>
     e76:	80 e2       	ldi	r24, 0x20	; 32
     e78:	f8 01       	movw	r30, r16
     e7a:	80 83       	st	Z, r24
     e7c:	4a e0       	ldi	r20, 0x0A	; 10
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	b7 01       	movw	r22, r14
     e82:	c9 01       	movw	r24, r18
     e84:	0e 94 55 0a 	call	0x14aa	; 0x14aa <itoa>
     e88:	b7 01       	movw	r22, r14
     e8a:	c8 01       	movw	r24, r16
     e8c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <strcat>
     e90:	8a e3       	ldi	r24, 0x3A	; 58
     e92:	f8 01       	movw	r30, r16
     e94:	82 83       	std	Z+2, r24	; 0x02
     e96:	7e 01       	movw	r14, r28
     e98:	08 94       	sec
     e9a:	e1 1c       	adc	r14, r1
     e9c:	f1 1c       	adc	r15, r1
     e9e:	2d 2d       	mov	r18, r13
     ea0:	33 27       	eor	r19, r19
     ea2:	f9 e0       	ldi	r31, 0x09	; 9
     ea4:	fd 15       	cp	r31, r13
     ea6:	18 f0       	brcs	.+6      	; 0xeae <s8_zeit+0x80>
     ea8:	80 e3       	ldi	r24, 0x30	; 48
     eaa:	f8 01       	movw	r30, r16
     eac:	83 83       	std	Z+3, r24	; 0x03
     eae:	4a e0       	ldi	r20, 0x0A	; 10
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	b7 01       	movw	r22, r14
     eb4:	c9 01       	movw	r24, r18
     eb6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <itoa>
     eba:	b7 01       	movw	r22, r14
     ebc:	c8 01       	movw	r24, r16
     ebe:	0e 94 4a 0a 	call	0x1494	; 0x1494 <strcat>
     ec2:	8a e3       	ldi	r24, 0x3A	; 58
     ec4:	f8 01       	movw	r30, r16
     ec6:	85 83       	std	Z+5, r24	; 0x05
     ec8:	7e 01       	movw	r14, r28
     eca:	08 94       	sec
     ecc:	e1 1c       	adc	r14, r1
     ece:	f1 1c       	adc	r15, r1
     ed0:	2c 2d       	mov	r18, r12
     ed2:	33 27       	eor	r19, r19
     ed4:	f9 e0       	ldi	r31, 0x09	; 9
     ed6:	fc 15       	cp	r31, r12
     ed8:	18 f0       	brcs	.+6      	; 0xee0 <s8_zeit+0xb2>
     eda:	80 e3       	ldi	r24, 0x30	; 48
     edc:	f8 01       	movw	r30, r16
     ede:	86 83       	std	Z+6, r24	; 0x06
     ee0:	4a e0       	ldi	r20, 0x0A	; 10
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	b7 01       	movw	r22, r14
     ee6:	c9 01       	movw	r24, r18
     ee8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <itoa>
     eec:	b7 01       	movw	r22, r14
     eee:	c8 01       	movw	r24, r16
     ef0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <strcat>
     ef4:	f8 01       	movw	r30, r16
     ef6:	10 86       	std	Z+8, r1	; 0x08
     ef8:	2c 96       	adiw	r28, 0x0c	; 12
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	08 95       	ret

00000f16 <interrupt_init>:
volatile int16_t 	I_DCF_P_DAUER = 0;
volatile int8_t 	I_DCF_new = 0;

void interrupt_init(void)
{
     f16:	84 b5       	in	r24, 0x24	; 36
     f18:	82 60       	ori	r24, 0x02	; 2
     f1a:	84 bd       	out	0x24, r24	; 36
	//Timer0B sorgt-Interrupt alle 1ms	
	// CTC-Modus
	TCCR0A |= (1<<WGM01);
	// 64-Vorteiler
	TCCR0B |= (1<<CS01) | (1<<CS00);
     f1c:	85 b5       	in	r24, 0x25	; 37
     f1e:	83 60       	ori	r24, 0x03	; 3
     f20:	85 bd       	out	0x25, r24	; 37
	// Obere Grenze
	OCR0A = 186;
     f22:	8a eb       	ldi	r24, 0xBA	; 186
     f24:	87 bd       	out	0x27, r24	; 39
	// Interrupt bei Compare Match aktivieren
	TIMSK0 |= 1<<OCIE0B;
     f26:	ee e6       	ldi	r30, 0x6E	; 110
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	84 60       	ori	r24, 0x04	; 4
     f2e:	80 83       	st	Z, r24


	// Pin-Change Interrupt auf PIN B0 einstellen
	PCICR |= (1<<PCIE1);
     f30:	e8 e6       	ldi	r30, 0x68	; 104
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	82 60       	ori	r24, 0x02	; 2
     f38:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT8);	
     f3a:	ec e6       	ldi	r30, 0x6C	; 108
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	81 60       	ori	r24, 0x01	; 1
     f42:	80 83       	st	Z, r24
     f44:	08 95       	ret

00000f46 <__vector_17>:
}
// 1ms
ISR(TIMER0_COMPB_vect)
{
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
	I_flag_1ms = 1;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	80 93 c0 01 	sts	0x01C0, r24
	I_DCF++;
     f5a:	80 91 c1 01 	lds	r24, 0x01C1
     f5e:	90 91 c2 01 	lds	r25, 0x01C2
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	90 93 c2 01 	sts	0x01C2, r25
     f68:	80 93 c1 01 	sts	0x01C1, r24
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_5>:
}
ISR(PCINT1_vect)
{
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	11 24       	eor	r1, r1
     f84:	8f 93       	push	r24
     f86:	9f 93       	push	r25
	I_DCF_P_DAUER = I_DCF;
     f88:	80 91 c1 01 	lds	r24, 0x01C1
     f8c:	90 91 c2 01 	lds	r25, 0x01C2
     f90:	90 93 c4 01 	sts	0x01C4, r25
     f94:	80 93 c3 01 	sts	0x01C3, r24
	I_DCF_new =1;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	80 93 c5 01 	sts	0x01C5, r24
	I_DCF = 0;
     f9e:	10 92 c2 01 	sts	0x01C2, r1
     fa2:	10 92 c1 01 	sts	0x01C1, r1
     fa6:	9f 91       	pop	r25
     fa8:	8f 91       	pop	r24
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <BufferIn>:
  uint8_t write; // zeigt immer auf leeres Feld
} buffer = {{}, 0, 0};
 
uint8_t BufferIn(uint8_t byte)
{
     fb4:	68 2f       	mov	r22, r24
  //if (buffer.write >= BUFFER_SIZE)
  //  buffer.write = 0; // erhöht sicherheit
 
  if (buffer.write + 1 == buffer.read || (buffer.read == 0 && (buffer.write + 1 == BUFFER_SIZE)))
     fb6:	40 91 d5 01 	lds	r20, 0x01D5
     fba:	e4 2f       	mov	r30, r20
     fbc:	ff 27       	eor	r31, r31
     fbe:	50 91 d4 01 	lds	r21, 0x01D4
     fc2:	9f 01       	movw	r18, r30
     fc4:	2f 5f       	subi	r18, 0xFF	; 255
     fc6:	3f 4f       	sbci	r19, 0xFF	; 255
     fc8:	85 2f       	mov	r24, r21
     fca:	99 27       	eor	r25, r25
     fcc:	28 17       	cp	r18, r24
     fce:	39 07       	cpc	r19, r25
     fd0:	91 f0       	breq	.+36     	; 0xff6 <BufferIn+0x42>
     fd2:	55 23       	and	r21, r21
     fd4:	11 f4       	brne	.+4      	; 0xfda <BufferIn+0x26>
     fd6:	49 30       	cpi	r20, 0x09	; 9
     fd8:	71 f0       	breq	.+28     	; 0xff6 <BufferIn+0x42>
    return 0; // voll
 
  buffer.data[buffer.write] = byte;
     fda:	e6 53       	subi	r30, 0x36	; 54
     fdc:	fe 4f       	sbci	r31, 0xFE	; 254
     fde:	60 83       	st	Z, r22
 
  buffer.write = buffer.write + 1;
     fe0:	84 2f       	mov	r24, r20
     fe2:	8f 5f       	subi	r24, 0xFF	; 255
     fe4:	80 93 d5 01 	sts	0x01D5, r24
  if (buffer.write >= BUFFER_SIZE)
     fe8:	8a 30       	cpi	r24, 0x0A	; 10
     fea:	10 f0       	brcs	.+4      	; 0xff0 <BufferIn+0x3c>
    buffer.write = 0;
     fec:	10 92 d5 01 	sts	0x01D5, r1
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	08 95       	ret
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
  return 1;
 
}
     ffa:	08 95       	ret

00000ffc <BufferOut>:
 
uint8_t BufferOut(uint8_t *pByte)
{
     ffc:	dc 01       	movw	r26, r24
  if (buffer.read == buffer.write)
     ffe:	e0 91 d4 01 	lds	r30, 0x01D4
    1002:	80 91 d5 01 	lds	r24, 0x01D5
    1006:	e8 17       	cp	r30, r24
    1008:	19 f4       	brne	.+6      	; 0x1010 <BufferOut+0x14>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	08 95       	ret
    return 0;
  *pByte = buffer.data[buffer.read];
    1010:	ff 27       	eor	r31, r31
    1012:	e6 53       	subi	r30, 0x36	; 54
    1014:	fe 4f       	sbci	r31, 0xFE	; 254
    1016:	80 81       	ld	r24, Z
    1018:	8c 93       	st	X, r24
 
  buffer.read = buffer.read + 1;
    101a:	80 91 d4 01 	lds	r24, 0x01D4
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	80 93 d4 01 	sts	0x01D4, r24
  if (buffer.read >= BUFFER_SIZE)
    1024:	8a 30       	cpi	r24, 0x0A	; 10
    1026:	18 f4       	brcc	.+6      	; 0x102e <BufferOut+0x32>
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	08 95       	ret
    buffer.read = 0;
    102e:	10 92 d4 01 	sts	0x01D4, r1
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
  return 1;
}
    1036:	08 95       	ret

00001038 <message>:


void message(uint8_t code)
{
    1038:	0e 94 da 07 	call	0xfb4	; 0xfb4 <BufferIn>
    103c:	08 95       	ret

0000103e <anzeige_clock>:
	BufferIn(code);

}
void anzeige_refresh_100ms(void)
{
	// Prüfen auf mögliche Sondermeldungen und dann diese anzeigen
	if(message_count_down >0)
	{
		//Meldung wird momentan ausgegeben
		message_count_down--;

	}
	if(msg_aktiv == 0)
	{
		uint8_t *buffer = 0;		
		if(BufferOut(buffer) >0)
		{
			lcd_gotoxy(0,0);
			for(uint8_t i = 0; i < 20; i++)
			{
				lcd_puts_P(" ");
			}

			char work[21];
			lcd_gotoxy(0,0);
			// Es liegt eine Meldung vor und die wird nun ausgegeben
			strcpy_P( work, (const char*)( pgm_read_word( &(msg_storage[*buffer]) ) ) );

			lcd_puts(work);
			message_count_down = 15;
			msg_aktiv = 1;
		}
	}
	if(message_count_down == 0 && msg_aktiv >0)
	{
				lcd_gotoxy(0,0);
			// Keine Meldung vorhanden
			// Falls hier eben eine War muss hier aufgeräumt werden.
			// Vielleicht kann man das auch so machen das hier nur wenn eine wirklich da WAR
			// das ganze weg kommt;

			msg_aktiv = 0;
			menu_new = 1;
	}
	switch (menu_counter)
	{
		case MAIN_MENU:
			// Menü zeichnenen
			if(menu_new)
			{
				lcd_clrscr();
				lcd_gotoxy(0,0);
				lcd_puts_P("Hauptmenu");
				lcd_gotoxy(1,1);
				lcd_puts_P("Netzteil1 Netzteil2");
				lcd_gotoxy(1,2);
				lcd_puts_P("Laden 1   Laden 2");
				lcd_gotoxy(1,3);
				lcd_puts_P("TWIN-VIEW Optionen");
			}
			// Auswahlzeiger platzieren
			if((drehgeber_1_alt != drehgeber_1) || menu_new)
			{
				menu_select = (6+drehgeber_1%6)%6;
				lcd_gotoxy((menu_select%2)*10,(menu_select)/2+1);
				lcd_puts_P(">");
				if(!menu_new)
				{
					lcd_gotoxy(((6+drehgeber_1_alt%6)%2)*10,((6+drehgeber_1_alt%6)%6)/2+1);
					lcd_puts_P(" ");
				}
				drehgeber_1_alt = drehgeber_1;
			}
			menu_new = 0;
			// Drückauswertung
			if(!DREH_1_T)
			{
				menu_new = 1;
				menu_counter = (menu_select+menu_counter+1)*10;
				drehgeber_1 =0;
			}
		break;
		case NT_1_MENU:
			if(menu_new)
			{
				lcd_clrscr();
				// Achtung ü = õ
				lcd_home();
				lcd_puts_P(" zurõck NT1");
				lcd_gotoxy(1,1);
				lcd_puts_P("Us:     V Ui:     V");
				lcd_gotoxy(1,2);
				lcd_puts_P("Im:     A Ii:     A");
				lcd_gotoxy(1,3);
				lcd_puts_P("Pm:     W Pi:     W");
			}
			// Auswahlzeiger platzieren
			if((drehgeber_1_alt != drehgeber_1) || menu_new)
			{
				menu_select= (4+drehgeber_1%4)%4;
				// Neuen Pfeil setzen
				lcd_gotoxy(0,menu_select);
				lcd_puts_P(">");

				// Alte Pfeile entfernen, außer wir haben gerade erst neugezeichnet
				if(!menu_new)
				{
					lcd_gotoxy(0,(4+drehgeber_1_alt%4)%4);
					lcd_puts_P(" ");
				}

				drehgeber_1_alt = drehgeber_1;
			}
			menu_new = 0;
			break;
		case LD_1_MENU:
			lcd_clrscr();
			lcd_gotoxy(3,1);
			lcd_puts_P("Software fehlt");
			if(DREH_1_T)
			{
				menu_new = 1;
				menu_counter = MAIN_MENU;				
			}
			
		break;

		case NT_2_MENU:
		case LD_2_MENU:
			lcd_clrscr();
			lcd_gotoxy(3,1);
			lcd_puts_P("Hardware fehlt");
			if(DREH_1_T)
			{
				menu_new = 1;
				menu_counter = MAIN_MENU;				
			}
			break;
		case TWIN_MENU:
		case OPTION_MENU:
		default:
			lcd_clrscr();
			lcd_gotoxy(3,1);
			lcd_puts_P("Menu unbekannt");
			if(DREH_1_T)
			{
				menu_new = 1;
				menu_counter = MAIN_MENU;				
			}
		break;
	}
}
void anzeige_clock (char* buffer)
{
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	ec 01       	movw	r28, r24
	if(msg_aktiv ==0 && uhrzeit.snc == 2)
    1044:	80 91 c9 01 	lds	r24, 0x01C9
    1048:	88 23       	and	r24, r24
    104a:	59 f4       	brne	.+22     	; 0x1062 <anzeige_clock+0x24>
    104c:	80 91 1c 02 	lds	r24, 0x021C
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	39 f4       	brne	.+14     	; 0x1062 <anzeige_clock+0x24>
	{
		lcd_gotoxy(12,0);
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	8c e0       	ldi	r24, 0x0C	; 12
    1058:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
		lcd_puts(buffer);
    105c:	ce 01       	movw	r24, r28
    105e:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_puts>
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	08 95       	ret

00001068 <anzeige_refresh_100ms>:
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	65 97       	sbiw	r28, 0x15	; 21
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	80 91 c6 01 	lds	r24, 0x01C6
    1084:	88 23       	and	r24, r24
    1086:	19 f0       	breq	.+6      	; 0x108e <anzeige_refresh_100ms+0x26>
    1088:	81 50       	subi	r24, 0x01	; 1
    108a:	80 93 c6 01 	sts	0x01C6, r24
    108e:	80 91 c9 01 	lds	r24, 0x01C9
    1092:	88 23       	and	r24, r24
    1094:	79 f5       	brne	.+94     	; 0x10f4 <anzeige_refresh_100ms+0x8c>
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 fe 07 	call	0xffc	; 0xffc <BufferOut>
    109e:	88 23       	and	r24, r24
    10a0:	49 f1       	breq	.+82     	; 0x10f4 <anzeige_refresh_100ms+0x8c>
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    10aa:	00 e0       	ldi	r16, 0x00	; 0
    10ac:	83 e6       	ldi	r24, 0x63	; 99
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    10b4:	0f 5f       	subi	r16, 0xFF	; 255
    10b6:	04 31       	cpi	r16, 0x14	; 20
    10b8:	c9 f7       	brne	.-14     	; 0x10ac <anzeige_refresh_100ms+0x44>
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    10c2:	e0 91 00 00 	lds	r30, 0x0000
    10c6:	ff 27       	eor	r31, r31
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	e3 56       	subi	r30, 0x63	; 99
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	65 91       	lpm	r22, Z+
    10d2:	74 91       	lpm	r23, Z
    10d4:	8e 01       	movw	r16, r28
    10d6:	0f 5f       	subi	r16, 0xFF	; 255
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255
    10da:	c8 01       	movw	r24, r16
    10dc:	0e 94 43 0a 	call	0x1486	; 0x1486 <strcpy_P>
    10e0:	c8 01       	movw	r24, r16
    10e2:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_puts>
    10e6:	8f e0       	ldi	r24, 0x0F	; 15
    10e8:	80 93 c6 01 	sts	0x01C6, r24
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	80 93 c9 01 	sts	0x01C9, r24
    10f2:	11 c0       	rjmp	.+34     	; 0x1116 <__stack+0x17>
    10f4:	80 91 c6 01 	lds	r24, 0x01C6
    10f8:	88 23       	and	r24, r24
    10fa:	69 f4       	brne	.+26     	; 0x1116 <__stack+0x17>
    10fc:	80 91 c9 01 	lds	r24, 0x01C9
    1100:	88 23       	and	r24, r24
    1102:	49 f0       	breq	.+18     	; 0x1116 <__stack+0x17>
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    110c:	10 92 c9 01 	sts	0x01C9, r1
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 2f 01 	sts	0x012F, r24
    1116:	80 91 c7 01 	lds	r24, 0x01C7
    111a:	84 31       	cpi	r24, 0x14	; 20
    111c:	09 f4       	brne	.+2      	; 0x1120 <__stack+0x21>
    111e:	31 c1       	rjmp	.+610    	; 0x1382 <__stack+0x283>
    1120:	85 31       	cpi	r24, 0x15	; 21
    1122:	30 f4       	brcc	.+12     	; 0x1130 <__stack+0x31>
    1124:	88 23       	and	r24, r24
    1126:	59 f0       	breq	.+22     	; 0x113e <__stack+0x3f>
    1128:	8a 30       	cpi	r24, 0x0A	; 10
    112a:	09 f0       	breq	.+2      	; 0x112e <__stack+0x2f>
    112c:	33 c1       	rjmp	.+614    	; 0x1394 <__stack+0x295>
    112e:	b5 c0       	rjmp	.+362    	; 0x129a <__stack+0x19b>
    1130:	8e 31       	cpi	r24, 0x1E	; 30
    1132:	09 f4       	brne	.+2      	; 0x1136 <__stack+0x37>
    1134:	1d c1       	rjmp	.+570    	; 0x1370 <__stack+0x271>
    1136:	88 32       	cpi	r24, 0x28	; 40
    1138:	09 f0       	breq	.+2      	; 0x113c <__stack+0x3d>
    113a:	2c c1       	rjmp	.+600    	; 0x1394 <__stack+0x295>
    113c:	22 c1       	rjmp	.+580    	; 0x1382 <__stack+0x283>
    113e:	80 91 2f 01 	lds	r24, 0x012F
    1142:	88 23       	and	r24, r24
    1144:	11 f1       	breq	.+68     	; 0x118a <__stack+0x8b>
    1146:	0e 94 3e 02 	call	0x47c	; 0x47c <lcd_clrscr>
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    1152:	89 e5       	ldi	r24, 0x59	; 89
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    1162:	85 e4       	ldi	r24, 0x45	; 69
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    116a:	62 e0       	ldi	r22, 0x02	; 2
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    1172:	83 e3       	ldi	r24, 0x33	; 51
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    117a:	63 e0       	ldi	r22, 0x03	; 3
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    1182:	80 e2       	ldi	r24, 0x20	; 32
    1184:	91 e0       	ldi	r25, 0x01	; 1
    1186:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    118a:	20 91 32 01 	lds	r18, 0x0132
    118e:	30 91 33 01 	lds	r19, 0x0133
    1192:	80 91 30 01 	lds	r24, 0x0130
    1196:	90 91 31 01 	lds	r25, 0x0131
    119a:	82 17       	cp	r24, r18
    119c:	93 07       	cpc	r25, r19
    119e:	29 f4       	brne	.+10     	; 0x11aa <__stack+0xab>
    11a0:	80 91 2f 01 	lds	r24, 0x012F
    11a4:	88 23       	and	r24, r24
    11a6:	09 f4       	brne	.+2      	; 0x11aa <__stack+0xab>
    11a8:	58 c0       	rjmp	.+176    	; 0x125a <__stack+0x15b>
    11aa:	c9 01       	movw	r24, r18
    11ac:	66 e0       	ldi	r22, 0x06	; 6
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	0e 94 86 0a 	call	0x150c	; 0x150c <__divmodhi4>
    11b4:	06 96       	adiw	r24, 0x06	; 6
    11b6:	66 e0       	ldi	r22, 0x06	; 6
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	0e 94 86 0a 	call	0x150c	; 0x150c <__divmodhi4>
    11be:	9c 01       	movw	r18, r24
    11c0:	20 93 c8 01 	sts	0x01C8, r18
    11c4:	68 2f       	mov	r22, r24
    11c6:	66 95       	lsr	r22
    11c8:	6f 5f       	subi	r22, 0xFF	; 255
    11ca:	99 27       	eor	r25, r25
    11cc:	81 70       	andi	r24, 0x01	; 1
    11ce:	90 70       	andi	r25, 0x00	; 0
    11d0:	9c 01       	movw	r18, r24
    11d2:	a3 e0       	ldi	r26, 0x03	; 3
    11d4:	22 0f       	add	r18, r18
    11d6:	33 1f       	adc	r19, r19
    11d8:	aa 95       	dec	r26
    11da:	e1 f7       	brne	.-8      	; 0x11d4 <__stack+0xd5>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	82 0f       	add	r24, r18
    11e2:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    11e6:	8e e1       	ldi	r24, 0x1E	; 30
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    11ee:	80 91 2f 01 	lds	r24, 0x012F
    11f2:	88 23       	and	r24, r24
    11f4:	51 f5       	brne	.+84     	; 0x124a <__stack+0x14b>
    11f6:	80 91 30 01 	lds	r24, 0x0130
    11fa:	90 91 31 01 	lds	r25, 0x0131
    11fe:	66 e0       	ldi	r22, 0x06	; 6
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	0e 94 86 0a 	call	0x150c	; 0x150c <__divmodhi4>
    1206:	fc 01       	movw	r30, r24
    1208:	36 96       	adiw	r30, 0x06	; 6
    120a:	cf 01       	movw	r24, r30
    120c:	66 e0       	ldi	r22, 0x06	; 6
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	0e 94 86 0a 	call	0x150c	; 0x150c <__divmodhi4>
    1214:	62 e0       	ldi	r22, 0x02	; 2
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	0e 94 86 0a 	call	0x150c	; 0x150c <__divmodhi4>
    121c:	9b 01       	movw	r18, r22
    121e:	2f 5f       	subi	r18, 0xFF	; 255
    1220:	cf 01       	movw	r24, r30
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	0e 94 86 0a 	call	0x150c	; 0x150c <__divmodhi4>
    122a:	ac 01       	movw	r20, r24
    122c:	e3 e0       	ldi	r30, 0x03	; 3
    122e:	44 0f       	add	r20, r20
    1230:	55 1f       	adc	r21, r21
    1232:	ea 95       	dec	r30
    1234:	e1 f7       	brne	.-8      	; 0x122e <__stack+0x12f>
    1236:	62 2f       	mov	r22, r18
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	84 0f       	add	r24, r20
    123e:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    1242:	8c e1       	ldi	r24, 0x1C	; 28
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    124a:	80 91 32 01 	lds	r24, 0x0132
    124e:	90 91 33 01 	lds	r25, 0x0133
    1252:	90 93 31 01 	sts	0x0131, r25
    1256:	80 93 30 01 	sts	0x0130, r24
    125a:	10 92 2f 01 	sts	0x012F, r1
    125e:	1b 99       	sbic	0x03, 3	; 3
    1260:	aa c0       	rjmp	.+340    	; 0x13b6 <__stack+0x2b7>
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	80 93 2f 01 	sts	0x012F, r24
    1268:	80 91 c8 01 	lds	r24, 0x01C8
    126c:	20 91 c7 01 	lds	r18, 0x01C7
    1270:	82 0f       	add	r24, r18
    1272:	91 2d       	mov	r25, r1
    1274:	91 1d       	adc	r25, r1
    1276:	9c 01       	movw	r18, r24
    1278:	53 e0       	ldi	r21, 0x03	; 3
    127a:	22 0f       	add	r18, r18
    127c:	33 1f       	adc	r19, r19
    127e:	5a 95       	dec	r21
    1280:	e1 f7       	brne	.-8      	; 0x127a <__stack+0x17b>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	82 0f       	add	r24, r18
    1288:	93 1f       	adc	r25, r19
    128a:	86 5f       	subi	r24, 0xF6	; 246
    128c:	80 93 c7 01 	sts	0x01C7, r24
    1290:	10 92 33 01 	sts	0x0133, r1
    1294:	10 92 32 01 	sts	0x0132, r1
    1298:	8e c0       	rjmp	.+284    	; 0x13b6 <__stack+0x2b7>
    129a:	80 91 2f 01 	lds	r24, 0x012F
    129e:	88 23       	and	r24, r24
    12a0:	01 f1       	breq	.+64     	; 0x12e2 <__stack+0x1e3>
    12a2:	0e 94 3e 02 	call	0x47c	; 0x47c <lcd_clrscr>
    12a6:	0e 94 42 02 	call	0x484	; 0x484 <lcd_home>
    12aa:	80 e1       	ldi	r24, 0x10	; 16
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    12ba:	8c ef       	ldi	r24, 0xFC	; 252
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    12c2:	62 e0       	ldi	r22, 0x02	; 2
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    12ca:	88 ee       	ldi	r24, 0xE8	; 232
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    12d2:	63 e0       	ldi	r22, 0x03	; 3
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    12da:	84 ed       	ldi	r24, 0xD4	; 212
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    12e2:	20 91 32 01 	lds	r18, 0x0132
    12e6:	30 91 33 01 	lds	r19, 0x0133
    12ea:	80 91 30 01 	lds	r24, 0x0130
    12ee:	90 91 31 01 	lds	r25, 0x0131
    12f2:	82 17       	cp	r24, r18
    12f4:	93 07       	cpc	r25, r19
    12f6:	21 f4       	brne	.+8      	; 0x1300 <__stack+0x201>
    12f8:	80 91 2f 01 	lds	r24, 0x012F
    12fc:	88 23       	and	r24, r24
    12fe:	a9 f1       	breq	.+106    	; 0x136a <__stack+0x26b>
    1300:	c9 01       	movw	r24, r18
    1302:	64 e0       	ldi	r22, 0x04	; 4
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	0e 94 86 0a 	call	0x150c	; 0x150c <__divmodhi4>
    130a:	04 96       	adiw	r24, 0x04	; 4
    130c:	64 e0       	ldi	r22, 0x04	; 4
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	0e 94 86 0a 	call	0x150c	; 0x150c <__divmodhi4>
    1314:	80 93 c8 01 	sts	0x01C8, r24
    1318:	68 2f       	mov	r22, r24
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    1320:	82 ed       	ldi	r24, 0xD2	; 210
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    1328:	80 91 2f 01 	lds	r24, 0x012F
    132c:	88 23       	and	r24, r24
    132e:	a9 f4       	brne	.+42     	; 0x135a <__stack+0x25b>
    1330:	80 91 30 01 	lds	r24, 0x0130
    1334:	90 91 31 01 	lds	r25, 0x0131
    1338:	64 e0       	ldi	r22, 0x04	; 4
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	0e 94 86 0a 	call	0x150c	; 0x150c <__divmodhi4>
    1340:	04 96       	adiw	r24, 0x04	; 4
    1342:	64 e0       	ldi	r22, 0x04	; 4
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	0e 94 86 0a 	call	0x150c	; 0x150c <__divmodhi4>
    134a:	68 2f       	mov	r22, r24
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    1352:	80 ed       	ldi	r24, 0xD0	; 208
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    135a:	80 91 32 01 	lds	r24, 0x0132
    135e:	90 91 33 01 	lds	r25, 0x0133
    1362:	90 93 31 01 	sts	0x0131, r25
    1366:	80 93 30 01 	sts	0x0130, r24
    136a:	10 92 2f 01 	sts	0x012F, r1
    136e:	23 c0       	rjmp	.+70     	; 0x13b6 <__stack+0x2b7>
    1370:	0e 94 3e 02 	call	0x47c	; 0x47c <lcd_clrscr>
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	83 e0       	ldi	r24, 0x03	; 3
    1378:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    137c:	81 ec       	ldi	r24, 0xC1	; 193
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	11 c0       	rjmp	.+34     	; 0x13a4 <__stack+0x2a5>
    1382:	0e 94 3e 02 	call	0x47c	; 0x47c <lcd_clrscr>
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	83 e0       	ldi	r24, 0x03	; 3
    138a:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    138e:	82 eb       	ldi	r24, 0xB2	; 178
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	08 c0       	rjmp	.+16     	; 0x13a4 <__stack+0x2a5>
    1394:	0e 94 3e 02 	call	0x47c	; 0x47c <lcd_clrscr>
    1398:	61 e0       	ldi	r22, 0x01	; 1
    139a:	83 e0       	ldi	r24, 0x03	; 3
    139c:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_gotoxy>
    13a0:	83 ea       	ldi	r24, 0xA3	; 163
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_puts_p>
    13a8:	1b 9b       	sbis	0x03, 3	; 3
    13aa:	05 c0       	rjmp	.+10     	; 0x13b6 <__stack+0x2b7>
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	80 93 2f 01 	sts	0x012F, r24
    13b2:	10 92 c7 01 	sts	0x01C7, r1
    13b6:	65 96       	adiw	r28, 0x15	; 21
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	08 95       	ret

000013cc <encode_init>:
static int8_t last;
static int8_t pressed;

void encode_init( void )
{
    13cc:	85 b1       	in	r24, 0x05	; 5
    13ce:	8e 60       	ori	r24, 0x0E	; 14
    13d0:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PINB1) | (1<<PINB2) | (1<<PINB3);
  int8_t new;
 
  new = 0;
  if( DREH_1_A )
    13d2:	19 9b       	sbis	0x03, 1	; 3
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <encode_init+0xe>
    13d6:	93 e0       	ldi	r25, 0x03	; 3
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <encode_init+0x10>
    13da:	90 e0       	ldi	r25, 0x00	; 0
    new = 3;
  if( DREH_1_B )
    13dc:	1a 9b       	sbis	0x03, 2	; 3
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <encode_init+0x18>
    new ^= 1;                   // convert gray to binary
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	98 27       	eor	r25, r24
  last = new;                   // power on state
    13e4:	90 93 d6 01 	sts	0x01D6, r25
    13e8:	08 95       	ret

000013ea <encode_read1>:
}
int8_t encode_read1( void )         // read single step encoders
{
    13ea:	f8 94       	cli
  int8_t val;
 
  cli();
  val = enc_delta;
    13ec:	80 91 59 02 	lds	r24, 0x0259
  enc_delta = 0;
    13f0:	10 92 59 02 	sts	0x0259, r1
  sei();
    13f4:	78 94       	sei
  return val;                   // counts since last call
}
    13f6:	99 27       	eor	r25, r25
    13f8:	87 fd       	sbrc	r24, 7
    13fa:	90 95       	com	r25
    13fc:	08 95       	ret

000013fe <encode_read2>:

int8_t encode_read2( void )         // read two step encoders
{
    13fe:	f8 94       	cli
  int8_t val;
 
  cli();
  val = enc_delta;
    1400:	80 91 59 02 	lds	r24, 0x0259
  enc_delta = val & 1;
    1404:	98 2f       	mov	r25, r24
    1406:	91 70       	andi	r25, 0x01	; 1
    1408:	90 93 59 02 	sts	0x0259, r25
  sei();
    140c:	78 94       	sei
    140e:	85 95       	asr	r24
  return val >> 1;
}
    1410:	99 27       	eor	r25, r25
    1412:	87 fd       	sbrc	r24, 7
    1414:	90 95       	com	r25
    1416:	08 95       	ret

00001418 <encode_read4>:
 
 
int8_t encode_read4( void )         // read four step encoders
{
    1418:	f8 94       	cli
  int8_t val;
 
  cli();
  val = enc_delta;
    141a:	80 91 59 02 	lds	r24, 0x0259
  enc_delta = val & 3;
    141e:	98 2f       	mov	r25, r24
    1420:	93 70       	andi	r25, 0x03	; 3
    1422:	90 93 59 02 	sts	0x0259, r25
  sei();
    1426:	78 94       	sei
    1428:	85 95       	asr	r24
    142a:	85 95       	asr	r24
  return val >> 2;
}
    142c:	99 27       	eor	r25, r25
    142e:	87 fd       	sbrc	r24, 7
    1430:	90 95       	com	r25
    1432:	08 95       	ret

00001434 <encode_press>:
uint8_t encode_press(void)
{
    1434:	80 91 d7 01 	lds	r24, 0x01D7
    1438:	88 23       	and	r24, r24
    143a:	19 f4       	brne	.+6      	; 0x1442 <encode_press+0xe>
	if(pressed)
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	08 95       	ret
	{
		pressed = 0;
    1442:	10 92 d7 01 	sts	0x01D7, r1
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
		return 1;	
	}
	return 0;
}
    144a:	08 95       	ret

0000144c <drehgeber_auswertung_1ms>:

void drehgeber_auswertung_1ms()
{
    144c:	19 9b       	sbis	0x03, 1	; 3
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <drehgeber_auswertung_1ms+0x8>
  int8_t new, diff;
 
  new = 0;
  if( DREH_1_A )
    1450:	23 e0       	ldi	r18, 0x03	; 3
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <drehgeber_auswertung_1ms+0xa>
    1454:	20 e0       	ldi	r18, 0x00	; 0
    new = 3;
  if( DREH_1_B )
    1456:	1a 9b       	sbis	0x03, 2	; 3
    1458:	02 c0       	rjmp	.+4      	; 0x145e <drehgeber_auswertung_1ms+0x12>
    new ^= 1;                   // convert gray to binary
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	28 27       	eor	r18, r24
  diff = last - new;                // difference last - new
    145e:	90 91 d6 01 	lds	r25, 0x01D6
    1462:	92 1b       	sub	r25, r18
  if( diff & 1 ){               // bit 0 = value (1)
    1464:	90 ff       	sbrs	r25, 0
    1466:	0e c0       	rjmp	.+28     	; 0x1484 <drehgeber_auswertung_1ms+0x38>
    last = new;                 // store new as next last
    1468:	20 93 d6 01 	sts	0x01D6, r18
    enc_delta += (diff & 2) - 1;        // bit 1 = direction (+/-)
    146c:	92 70       	andi	r25, 0x02	; 2
    146e:	80 91 59 02 	lds	r24, 0x0259
    1472:	98 0f       	add	r25, r24
    1474:	91 50       	subi	r25, 0x01	; 1
    1476:	90 93 59 02 	sts	0x0259, r25
	if(DREH_1_T)
    147a:	1b 9b       	sbis	0x03, 3	; 3
    147c:	03 c0       	rjmp	.+6      	; 0x1484 <drehgeber_auswertung_1ms+0x38>
	{
		pressed = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	80 93 d7 01 	sts	0x01D7, r24
    1484:	08 95       	ret

00001486 <strcpy_P>:
    1486:	fb 01       	movw	r30, r22
    1488:	dc 01       	movw	r26, r24
    148a:	05 90       	lpm	r0, Z+
    148c:	0d 92       	st	X+, r0
    148e:	00 20       	and	r0, r0
    1490:	e1 f7       	brne	.-8      	; 0x148a <strcpy_P+0x4>
    1492:	08 95       	ret

00001494 <strcat>:
    1494:	fb 01       	movw	r30, r22
    1496:	dc 01       	movw	r26, r24
    1498:	0d 90       	ld	r0, X+
    149a:	00 20       	and	r0, r0
    149c:	e9 f7       	brne	.-6      	; 0x1498 <strcat+0x4>
    149e:	11 97       	sbiw	r26, 0x01	; 1
    14a0:	01 90       	ld	r0, Z+
    14a2:	0d 92       	st	X+, r0
    14a4:	00 20       	and	r0, r0
    14a6:	e1 f7       	brne	.-8      	; 0x14a0 <strcat+0xc>
    14a8:	08 95       	ret

000014aa <itoa>:
    14aa:	fb 01       	movw	r30, r22
    14ac:	9f 01       	movw	r18, r30
    14ae:	e8 94       	clt
    14b0:	42 30       	cpi	r20, 0x02	; 2
    14b2:	c4 f0       	brlt	.+48     	; 0x14e4 <itoa+0x3a>
    14b4:	45 32       	cpi	r20, 0x25	; 37
    14b6:	b4 f4       	brge	.+44     	; 0x14e4 <itoa+0x3a>
    14b8:	4a 30       	cpi	r20, 0x0A	; 10
    14ba:	29 f4       	brne	.+10     	; 0x14c6 <itoa+0x1c>
    14bc:	97 fb       	bst	r25, 7
    14be:	1e f4       	brtc	.+6      	; 0x14c6 <itoa+0x1c>
    14c0:	90 95       	com	r25
    14c2:	81 95       	neg	r24
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	64 2f       	mov	r22, r20
    14c8:	77 27       	eor	r23, r23
    14ca:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__udivmodhi4>
    14ce:	80 5d       	subi	r24, 0xD0	; 208
    14d0:	8a 33       	cpi	r24, 0x3A	; 58
    14d2:	0c f0       	brlt	.+2      	; 0x14d6 <itoa+0x2c>
    14d4:	89 5d       	subi	r24, 0xD9	; 217
    14d6:	81 93       	st	Z+, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	a1 f7       	brne	.-24     	; 0x14c6 <itoa+0x1c>
    14de:	16 f4       	brtc	.+4      	; 0x14e4 <itoa+0x3a>
    14e0:	5d e2       	ldi	r21, 0x2D	; 45
    14e2:	51 93       	st	Z+, r21
    14e4:	10 82       	st	Z, r1
    14e6:	c9 01       	movw	r24, r18
    14e8:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <strrev>

000014ec <strrev>:
    14ec:	dc 01       	movw	r26, r24
    14ee:	fc 01       	movw	r30, r24
    14f0:	67 2f       	mov	r22, r23
    14f2:	71 91       	ld	r23, Z+
    14f4:	77 23       	and	r23, r23
    14f6:	e1 f7       	brne	.-8      	; 0x14f0 <strrev+0x4>
    14f8:	32 97       	sbiw	r30, 0x02	; 2
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <strrev+0x18>
    14fc:	7c 91       	ld	r23, X
    14fe:	6d 93       	st	X+, r22
    1500:	70 83       	st	Z, r23
    1502:	62 91       	ld	r22, -Z
    1504:	ae 17       	cp	r26, r30
    1506:	bf 07       	cpc	r27, r31
    1508:	c8 f3       	brcs	.-14     	; 0x14fc <strrev+0x10>
    150a:	08 95       	ret

0000150c <__divmodhi4>:
    150c:	97 fb       	bst	r25, 7
    150e:	09 2e       	mov	r0, r25
    1510:	07 26       	eor	r0, r23
    1512:	0a d0       	rcall	.+20     	; 0x1528 <__divmodhi4_neg1>
    1514:	77 fd       	sbrc	r23, 7
    1516:	04 d0       	rcall	.+8      	; 0x1520 <__divmodhi4_neg2>
    1518:	2e d0       	rcall	.+92     	; 0x1576 <__udivmodhi4>
    151a:	06 d0       	rcall	.+12     	; 0x1528 <__divmodhi4_neg1>
    151c:	00 20       	and	r0, r0
    151e:	1a f4       	brpl	.+6      	; 0x1526 <__divmodhi4_exit>

00001520 <__divmodhi4_neg2>:
    1520:	70 95       	com	r23
    1522:	61 95       	neg	r22
    1524:	7f 4f       	sbci	r23, 0xFF	; 255

00001526 <__divmodhi4_exit>:
    1526:	08 95       	ret

00001528 <__divmodhi4_neg1>:
    1528:	f6 f7       	brtc	.-4      	; 0x1526 <__divmodhi4_exit>
    152a:	90 95       	com	r25
    152c:	81 95       	neg	r24
    152e:	9f 4f       	sbci	r25, 0xFF	; 255
    1530:	08 95       	ret

00001532 <__udivmodsi4>:
    1532:	a1 e2       	ldi	r26, 0x21	; 33
    1534:	1a 2e       	mov	r1, r26
    1536:	aa 1b       	sub	r26, r26
    1538:	bb 1b       	sub	r27, r27
    153a:	fd 01       	movw	r30, r26
    153c:	0d c0       	rjmp	.+26     	; 0x1558 <__udivmodsi4_ep>

0000153e <__udivmodsi4_loop>:
    153e:	aa 1f       	adc	r26, r26
    1540:	bb 1f       	adc	r27, r27
    1542:	ee 1f       	adc	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	a2 17       	cp	r26, r18
    1548:	b3 07       	cpc	r27, r19
    154a:	e4 07       	cpc	r30, r20
    154c:	f5 07       	cpc	r31, r21
    154e:	20 f0       	brcs	.+8      	; 0x1558 <__udivmodsi4_ep>
    1550:	a2 1b       	sub	r26, r18
    1552:	b3 0b       	sbc	r27, r19
    1554:	e4 0b       	sbc	r30, r20
    1556:	f5 0b       	sbc	r31, r21

00001558 <__udivmodsi4_ep>:
    1558:	66 1f       	adc	r22, r22
    155a:	77 1f       	adc	r23, r23
    155c:	88 1f       	adc	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	1a 94       	dec	r1
    1562:	69 f7       	brne	.-38     	; 0x153e <__udivmodsi4_loop>
    1564:	60 95       	com	r22
    1566:	70 95       	com	r23
    1568:	80 95       	com	r24
    156a:	90 95       	com	r25
    156c:	9b 01       	movw	r18, r22
    156e:	ac 01       	movw	r20, r24
    1570:	bd 01       	movw	r22, r26
    1572:	cf 01       	movw	r24, r30
    1574:	08 95       	ret

00001576 <__udivmodhi4>:
    1576:	aa 1b       	sub	r26, r26
    1578:	bb 1b       	sub	r27, r27
    157a:	51 e1       	ldi	r21, 0x11	; 17
    157c:	07 c0       	rjmp	.+14     	; 0x158c <__udivmodhi4_ep>

0000157e <__udivmodhi4_loop>:
    157e:	aa 1f       	adc	r26, r26
    1580:	bb 1f       	adc	r27, r27
    1582:	a6 17       	cp	r26, r22
    1584:	b7 07       	cpc	r27, r23
    1586:	10 f0       	brcs	.+4      	; 0x158c <__udivmodhi4_ep>
    1588:	a6 1b       	sub	r26, r22
    158a:	b7 0b       	sbc	r27, r23

0000158c <__udivmodhi4_ep>:
    158c:	88 1f       	adc	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	5a 95       	dec	r21
    1592:	a9 f7       	brne	.-22     	; 0x157e <__udivmodhi4_loop>
    1594:	80 95       	com	r24
    1596:	90 95       	com	r25
    1598:	bc 01       	movw	r22, r24
    159a:	cd 01       	movw	r24, r26
    159c:	08 95       	ret

0000159e <_exit>:
    159e:	ff cf       	rjmp	.-2      	; 0x159e <_exit>
